import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { WorkflowExpressionConditionModelOutput } from "./WorkflowExpressionConditionModelOutput";
import { WorkflowLlmConditionModelOutput } from "./WorkflowLlmConditionModelOutput";
import { WorkflowResultConditionModelOutput } from "./WorkflowResultConditionModelOutput";
import { WorkflowUnconditionalModelOutput } from "./WorkflowUnconditionalModelOutput";
export declare const WorkflowEdgeModelOutputBackwardCondition: core.serialization.Schema<serializers.WorkflowEdgeModelOutputBackwardCondition.Raw, ElevenLabs.WorkflowEdgeModelOutputBackwardCondition>;
export declare namespace WorkflowEdgeModelOutputBackwardCondition {
    type Raw = WorkflowEdgeModelOutputBackwardCondition.Expression | WorkflowEdgeModelOutputBackwardCondition.Llm | WorkflowEdgeModelOutputBackwardCondition.Result | WorkflowEdgeModelOutputBackwardCondition.Unconditional;
    interface Expression extends WorkflowExpressionConditionModelOutput.Raw {
        type: "expression";
    }
    interface Llm extends WorkflowLlmConditionModelOutput.Raw {
        type: "llm";
    }
    interface Result extends WorkflowResultConditionModelOutput.Raw {
        type: "result";
    }
    interface Unconditional extends WorkflowUnconditionalModelOutput.Raw {
        type: "unconditional";
    }
}
