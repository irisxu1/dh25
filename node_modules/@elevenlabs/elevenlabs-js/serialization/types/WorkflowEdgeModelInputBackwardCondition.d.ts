import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { WorkflowExpressionConditionModelInput } from "./WorkflowExpressionConditionModelInput";
import { WorkflowLlmConditionModelInput } from "./WorkflowLlmConditionModelInput";
import { WorkflowResultConditionModelInput } from "./WorkflowResultConditionModelInput";
import { WorkflowUnconditionalModelInput } from "./WorkflowUnconditionalModelInput";
export declare const WorkflowEdgeModelInputBackwardCondition: core.serialization.Schema<serializers.WorkflowEdgeModelInputBackwardCondition.Raw, ElevenLabs.WorkflowEdgeModelInputBackwardCondition>;
export declare namespace WorkflowEdgeModelInputBackwardCondition {
    type Raw = WorkflowEdgeModelInputBackwardCondition.Expression | WorkflowEdgeModelInputBackwardCondition.Llm | WorkflowEdgeModelInputBackwardCondition.Result | WorkflowEdgeModelInputBackwardCondition.Unconditional;
    interface Expression extends WorkflowExpressionConditionModelInput.Raw {
        type: "expression";
    }
    interface Llm extends WorkflowLlmConditionModelInput.Raw {
        type: "llm";
    }
    interface Result extends WorkflowResultConditionModelInput.Raw {
        type: "result";
    }
    interface Unconditional extends WorkflowUnconditionalModelInput.Raw {
        type: "unconditional";
    }
}
