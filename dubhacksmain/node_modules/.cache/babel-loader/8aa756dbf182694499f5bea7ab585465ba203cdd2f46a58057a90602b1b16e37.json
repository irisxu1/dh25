{"ast":null,"code":"import axios from 'axios';\n\n// interface ElevenLabsResponse {\n//   audio: string; // Base64 encoded audio\n//   isFinal: boolean;\n// }\n\nclass ElevenLabsService {\n  constructor() {\n    this.apiKey = void 0;\n    this.baseUrl = 'https://api.elevenlabs.io/v1';\n    // Your ElevenLabs API key\n    this.apiKey = 'sk_80e980bf40026ecd7d283ab8683c973a52751516e9d0578f';\n  }\n  async textToSpeech(text, voiceId = 'pNInz6obpgDQGcFmaJgB') {\n    try {\n      const response = await axios.post(`${this.baseUrl}/text-to-speech/${voiceId}`, {\n        text,\n        model_id: 'eleven_turbo_v2_5',\n        // Using the latest Turbo model for better performance\n        voice_settings: {\n          stability: 0.5,\n          similarity_boost: 0.5,\n          style: 0.0,\n          use_speaker_boost: true\n        }\n      }, {\n        headers: {\n          'Accept': 'audio/mpeg',\n          'Content-Type': 'application/json',\n          'xi-api-key': this.apiKey\n        },\n        responseType: 'arraybuffer'\n      });\n\n      // Convert audio buffer to base64\n      const audioBuffer = Buffer.from(response.data);\n      return audioBuffer.toString('base64');\n    } catch (error) {\n      console.error('Error with ElevenLabs text-to-speech:', error);\n      throw error;\n    }\n  }\n  async getVoices() {\n    try {\n      const response = await axios.get(`${this.baseUrl}/voices`, {\n        headers: {\n          'xi-api-key': this.apiKey\n        }\n      });\n      return response.data.voices;\n    } catch (error) {\n      console.error('Error fetching voices:', error);\n      return [];\n    }\n  }\n\n  // Get a professional voice suitable for interview questions\n  async getInterviewVoice() {\n    try {\n      const voices = await this.getVoices();\n      // Look for professional voices (Adam, Bella, etc.)\n      const professionalVoices = voices.filter(voice => voice.name.toLowerCase().includes('adam') || voice.name.toLowerCase().includes('bella') || voice.name.toLowerCase().includes('professional'));\n      if (professionalVoices.length > 0) {\n        return professionalVoices[0].voice_id;\n      }\n\n      // Fallback to first available voice\n      return voices.length > 0 ? voices[0].voice_id : 'pNInz6obpgDQGcFmaJgB';\n    } catch (error) {\n      console.error('Error getting interview voice:', error);\n      return 'pNInz6obpgDQGcFmaJgB'; // Default professional voice\n    }\n  }\n  async speechToSpeech(audioFile, voiceId = 'pNInz6obpgDQGcFmaJgB') {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioFile);\n      formData.append('voice_id', voiceId);\n      formData.append('model_id', 'eleven_multilingual_v2'); // Using the latest multilingual model\n\n      const response = await axios.post(`${this.baseUrl}/speech-to-speech/${voiceId}`, formData, {\n        headers: {\n          'Accept': 'audio/mpeg',\n          'xi-api-key': this.apiKey\n        },\n        responseType: 'arraybuffer'\n      });\n      const audioBuffer = Buffer.from(response.data);\n      return audioBuffer.toString('base64');\n    } catch (error) {\n      console.error('Error with ElevenLabs speech-to-speech:', error);\n      throw error;\n    }\n  }\n\n  // Helper method to play audio from base64\n  playAudio(base64Audio) {\n    const audio = new Audio(`data:audio/mpeg;base64,${base64Audio}`);\n    return audio.play();\n  }\n\n  // Generate interview question audio with professional voice\n  async generateQuestionAudio(question) {\n    try {\n      const voiceId = await this.getInterviewVoice();\n      const base64Audio = await this.textToSpeech(question, voiceId);\n      const audio = new Audio(`data:audio/mpeg;base64,${base64Audio}`);\n      return audio;\n    } catch (error) {\n      console.error('Error generating question audio:', error);\n      throw error;\n    }\n  }\n\n  // Speech-to-text transcription using ElevenLabs\n  async speechToText(audioBlob) {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      formData.append('model_id', 'whisper-1'); // Using Whisper model for transcription\n\n      const response = await axios.post(`${this.baseUrl}/speech-to-text`, formData, {\n        headers: {\n          'xi-api-key': this.apiKey\n        }\n      });\n      return response.data.text || '';\n    } catch (error) {\n      console.error('Error with ElevenLabs speech-to-text:', error);\n      throw error;\n    }\n  }\n}\nexport const elevenLabsService = new ElevenLabsService();","map":{"version":3,"names":["axios","ElevenLabsService","constructor","apiKey","baseUrl","textToSpeech","text","voiceId","response","post","model_id","voice_settings","stability","similarity_boost","style","use_speaker_boost","headers","responseType","audioBuffer","Buffer","from","data","toString","error","console","getVoices","get","voices","getInterviewVoice","professionalVoices","filter","voice","name","toLowerCase","includes","length","voice_id","speechToSpeech","audioFile","formData","FormData","append","playAudio","base64Audio","audio","Audio","play","generateQuestionAudio","question","speechToText","audioBlob","elevenLabsService"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/services/elevenLabsService.ts"],"sourcesContent":["import axios from 'axios';\n\n// interface ElevenLabsResponse {\n//   audio: string; // Base64 encoded audio\n//   isFinal: boolean;\n// }\n\nclass ElevenLabsService {\n  private apiKey: string;\n  private baseUrl = 'https://api.elevenlabs.io/v1';\n\n  constructor() {\n    // Your ElevenLabs API key\n    this.apiKey = 'sk_80e980bf40026ecd7d283ab8683c973a52751516e9d0578f';\n  }\n\n  async textToSpeech(text: string, voiceId: string = 'pNInz6obpgDQGcFmaJgB'): Promise<string> {\n    try {\n      const response = await axios.post(\n        `${this.baseUrl}/text-to-speech/${voiceId}`,\n        {\n          text,\n          model_id: 'eleven_turbo_v2_5', // Using the latest Turbo model for better performance\n          voice_settings: {\n            stability: 0.5,\n            similarity_boost: 0.5,\n            style: 0.0,\n            use_speaker_boost: true\n          }\n        },\n        {\n          headers: {\n            'Accept': 'audio/mpeg',\n            'Content-Type': 'application/json',\n            'xi-api-key': this.apiKey\n          },\n          responseType: 'arraybuffer'\n        }\n      );\n\n      // Convert audio buffer to base64\n      const audioBuffer = Buffer.from(response.data);\n      return audioBuffer.toString('base64');\n    } catch (error) {\n      console.error('Error with ElevenLabs text-to-speech:', error);\n      throw error;\n    }\n  }\n\n  async getVoices(): Promise<any[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/voices`, {\n        headers: {\n          'xi-api-key': this.apiKey\n        }\n      });\n      return response.data.voices;\n    } catch (error) {\n      console.error('Error fetching voices:', error);\n      return [];\n    }\n  }\n\n  // Get a professional voice suitable for interview questions\n  async getInterviewVoice(): Promise<string> {\n    try {\n      const voices = await this.getVoices();\n      // Look for professional voices (Adam, Bella, etc.)\n      const professionalVoices = voices.filter((voice: any) => \n        voice.name.toLowerCase().includes('adam') || \n        voice.name.toLowerCase().includes('bella') ||\n        voice.name.toLowerCase().includes('professional')\n      );\n      \n      if (professionalVoices.length > 0) {\n        return professionalVoices[0].voice_id;\n      }\n      \n      // Fallback to first available voice\n      return voices.length > 0 ? voices[0].voice_id : 'pNInz6obpgDQGcFmaJgB';\n    } catch (error) {\n      console.error('Error getting interview voice:', error);\n      return 'pNInz6obpgDQGcFmaJgB'; // Default professional voice\n    }\n  }\n\n  async speechToSpeech(audioFile: File, voiceId: string = 'pNInz6obpgDQGcFmaJgB'): Promise<string> {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioFile);\n      formData.append('voice_id', voiceId);\n      formData.append('model_id', 'eleven_multilingual_v2'); // Using the latest multilingual model\n\n      const response = await axios.post(\n        `${this.baseUrl}/speech-to-speech/${voiceId}`,\n        formData,\n        {\n          headers: {\n            'Accept': 'audio/mpeg',\n            'xi-api-key': this.apiKey\n          },\n          responseType: 'arraybuffer'\n        }\n      );\n\n      const audioBuffer = Buffer.from(response.data);\n      return audioBuffer.toString('base64');\n    } catch (error) {\n      console.error('Error with ElevenLabs speech-to-speech:', error);\n      throw error;\n    }\n  }\n\n  // Helper method to play audio from base64\n  playAudio(base64Audio: string) {\n    const audio = new Audio(`data:audio/mpeg;base64,${base64Audio}`);\n    return audio.play();\n  }\n\n  // Generate interview question audio with professional voice\n  async generateQuestionAudio(question: string): Promise<HTMLAudioElement> {\n    try {\n      const voiceId = await this.getInterviewVoice();\n      const base64Audio = await this.textToSpeech(question, voiceId);\n      const audio = new Audio(`data:audio/mpeg;base64,${base64Audio}`);\n      return audio;\n    } catch (error) {\n      console.error('Error generating question audio:', error);\n      throw error;\n    }\n  }\n\n  // Speech-to-text transcription using ElevenLabs\n  async speechToText(audioBlob: Blob): Promise<string> {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      formData.append('model_id', 'whisper-1'); // Using Whisper model for transcription\n\n      const response = await axios.post(\n        `${this.baseUrl}/speech-to-text`,\n        formData,\n        {\n          headers: {\n            'xi-api-key': this.apiKey\n          }\n        }\n      );\n\n      return response.data.text || '';\n    } catch (error) {\n      console.error('Error with ElevenLabs speech-to-text:', error);\n      throw error;\n    }\n  }\n}\n\nexport const elevenLabsService = new ElevenLabsService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}