{"ast":null,"code":"import { elevenLabsService } from './elevenLabsService';\nclass VoiceAnalysisService {\n  constructor() {\n    this.fillerWords = ['um', 'uh', 'like', 'you know', 'so', 'well', 'actually', 'basically', 'literally'];\n  }\n  async analyzeVoice(audioBlob, transcript) {\n    try {\n      // Basic analysis from transcript\n      const words = transcript.toLowerCase().split(/\\s+/);\n      const fillerWordCount = this.countFillerWords(words);\n      const speakingRate = this.calculateSpeakingRate(words, 30); // Assume 30 seconds for now\n\n      // Use ElevenLabs for advanced analysis\n      let sentiment = 'neutral';\n      let confidence = 75;\n\n      // ElevenLabs API key is available\n      try {\n        // Convert blob to file for ElevenLabs analysis\n        const audioFile = new File([audioBlob], 'recording.wav', {\n          type: 'audio/wav'\n        });\n\n        // Use ElevenLabs for speech-to-speech analysis to get better insights\n        const enhancedAudio = await elevenLabsService.speechToSpeech(audioFile);\n\n        // For now, we'll use the enhanced audio as a signal that analysis was successful\n        // In a real implementation, you'd analyze the enhanced audio for better metrics\n        confidence = 90;\n        sentiment = this.analyzeSentiment(transcript);\n      } catch (error) {\n        console.log('ElevenLabs analysis failed, using basic analysis:', error);\n      }\n      return {\n        fillerWords: fillerWordCount,\n        speakingRate: Math.round(speakingRate),\n        volume: this.estimateVolume(audioBlob),\n        clarity: this.estimateClarity(transcript),\n        transcript,\n        sentiment,\n        confidence\n      };\n    } catch (error) {\n      console.error('Voice analysis error:', error);\n      // Return fallback analysis\n      return this.getFallbackAnalysis(transcript);\n    }\n  }\n  countFillerWords(words) {\n    return words.filter(word => this.fillerWords.includes(word.replace(/[^\\w]/g, ''))).length;\n  }\n  calculateSpeakingRate(words, durationSeconds) {\n    const durationMinutes = durationSeconds / 60;\n    return words.length / durationMinutes;\n  }\n  estimateVolume(audioBlob) {\n    // This is a simplified volume estimation\n    // In a real implementation, you'd analyze the audio data\n    const size = audioBlob.size;\n    if (size > 100000) return 85; // Large file = loud\n    if (size > 50000) return 75; // Medium file = medium\n    return 65; // Small file = quiet\n  }\n  estimateClarity(transcript) {\n    // Simple clarity estimation based on transcript quality\n    const words = transcript.split(/\\s+/);\n    const clearWords = words.filter(word => word.length > 1 && /^[a-zA-Z]+$/.test(word));\n    return Math.round(clearWords.length / words.length * 100);\n  }\n  analyzeSentiment(transcript) {\n    const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'confident', 'excited'];\n    const negativeWords = ['bad', 'terrible', 'awful', 'nervous', 'worried', 'scared', 'difficult'];\n    const words = transcript.toLowerCase().split(/\\s+/);\n    const positiveCount = words.filter(word => positiveWords.includes(word)).length;\n    const negativeCount = words.filter(word => negativeWords.includes(word)).length;\n    if (positiveCount > negativeCount) return 'positive';\n    if (negativeCount > positiveCount) return 'negative';\n    return 'neutral';\n  }\n  getFallbackAnalysis(transcript) {\n    const words = transcript.split(/\\s+/);\n    return {\n      fillerWords: this.countFillerWords(words),\n      speakingRate: 140,\n      volume: 75,\n      clarity: 80,\n      transcript,\n      sentiment: 'neutral',\n      confidence: 60\n    };\n  }\n\n  // Generate AI voice for interview questions\n  async generateQuestionVoice(question) {\n    try {\n      return await elevenLabsService.generateQuestionAudio(question);\n    } catch (error) {\n      console.error('Failed to generate AI voice:', error);\n      return null;\n    }\n  }\n}\nexport const voiceAnalysisService = new VoiceAnalysisService();","map":{"version":3,"names":["elevenLabsService","VoiceAnalysisService","constructor","fillerWords","analyzeVoice","audioBlob","transcript","words","toLowerCase","split","fillerWordCount","countFillerWords","speakingRate","calculateSpeakingRate","sentiment","confidence","audioFile","File","type","enhancedAudio","speechToSpeech","analyzeSentiment","error","console","log","Math","round","volume","estimateVolume","clarity","estimateClarity","getFallbackAnalysis","filter","word","includes","replace","length","durationSeconds","durationMinutes","size","clearWords","test","positiveWords","negativeWords","positiveCount","negativeCount","generateQuestionVoice","question","generateQuestionAudio","voiceAnalysisService"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/services/voiceAnalysisService.ts"],"sourcesContent":["import { elevenLabsService } from './elevenLabsService';\n\ninterface VoiceAnalysisResult {\n  fillerWords: number;\n  speakingRate: number;\n  volume: number;\n  clarity: number;\n  transcript: string;\n  sentiment: string;\n  confidence: number;\n}\n\nclass VoiceAnalysisService {\n  private fillerWords = ['um', 'uh', 'like', 'you know', 'so', 'well', 'actually', 'basically', 'literally'];\n\n  async analyzeVoice(audioBlob: Blob, transcript: string): Promise<VoiceAnalysisResult> {\n    try {\n      // Basic analysis from transcript\n      const words = transcript.toLowerCase().split(/\\s+/);\n      const fillerWordCount = this.countFillerWords(words);\n      const speakingRate = this.calculateSpeakingRate(words, 30); // Assume 30 seconds for now\n      \n      // Use ElevenLabs for advanced analysis\n      let sentiment = 'neutral';\n      let confidence = 75;\n      \n      // ElevenLabs API key is available\n      try {\n        // Convert blob to file for ElevenLabs analysis\n        const audioFile = new File([audioBlob], 'recording.wav', { type: 'audio/wav' });\n        \n        // Use ElevenLabs for speech-to-speech analysis to get better insights\n        const enhancedAudio = await elevenLabsService.speechToSpeech(audioFile);\n        \n        // For now, we'll use the enhanced audio as a signal that analysis was successful\n        // In a real implementation, you'd analyze the enhanced audio for better metrics\n        confidence = 90;\n        sentiment = this.analyzeSentiment(transcript);\n      } catch (error) {\n        console.log('ElevenLabs analysis failed, using basic analysis:', error);\n      }\n\n      return {\n        fillerWords: fillerWordCount,\n        speakingRate: Math.round(speakingRate),\n        volume: this.estimateVolume(audioBlob),\n        clarity: this.estimateClarity(transcript),\n        transcript,\n        sentiment,\n        confidence\n      };\n    } catch (error) {\n      console.error('Voice analysis error:', error);\n      // Return fallback analysis\n      return this.getFallbackAnalysis(transcript);\n    }\n  }\n\n  private countFillerWords(words: string[]): number {\n    return words.filter(word => \n      this.fillerWords.includes(word.replace(/[^\\w]/g, ''))\n    ).length;\n  }\n\n  private calculateSpeakingRate(words: string[], durationSeconds: number): number {\n    const durationMinutes = durationSeconds / 60;\n    return words.length / durationMinutes;\n  }\n\n  private estimateVolume(audioBlob: Blob): number {\n    // This is a simplified volume estimation\n    // In a real implementation, you'd analyze the audio data\n    const size = audioBlob.size;\n    if (size > 100000) return 85; // Large file = loud\n    if (size > 50000) return 75;  // Medium file = medium\n    return 65; // Small file = quiet\n  }\n\n  private estimateClarity(transcript: string): number {\n    // Simple clarity estimation based on transcript quality\n    const words = transcript.split(/\\s+/);\n    const clearWords = words.filter(word => word.length > 1 && /^[a-zA-Z]+$/.test(word));\n    return Math.round((clearWords.length / words.length) * 100);\n  }\n\n  private analyzeSentiment(transcript: string): string {\n    const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'confident', 'excited'];\n    const negativeWords = ['bad', 'terrible', 'awful', 'nervous', 'worried', 'scared', 'difficult'];\n    \n    const words = transcript.toLowerCase().split(/\\s+/);\n    const positiveCount = words.filter(word => positiveWords.includes(word)).length;\n    const negativeCount = words.filter(word => negativeWords.includes(word)).length;\n    \n    if (positiveCount > negativeCount) return 'positive';\n    if (negativeCount > positiveCount) return 'negative';\n    return 'neutral';\n  }\n\n  private getFallbackAnalysis(transcript: string): VoiceAnalysisResult {\n    const words = transcript.split(/\\s+/);\n    return {\n      fillerWords: this.countFillerWords(words),\n      speakingRate: 140,\n      volume: 75,\n      clarity: 80,\n      transcript,\n      sentiment: 'neutral',\n      confidence: 60\n    };\n  }\n\n  // Generate AI voice for interview questions\n  async generateQuestionVoice(question: string): Promise<HTMLAudioElement | null> {\n    try {\n      return await elevenLabsService.generateQuestionAudio(question);\n    } catch (error) {\n      console.error('Failed to generate AI voice:', error);\n      return null;\n    }\n  }\n}\n\nexport const voiceAnalysisService = new VoiceAnalysisService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}