{"ast":null,"code":"function extractAnswerText(transcript) {\n  const lines = transcript.split(/\\n+/).map(s => s.trim());\n  const answers = lines.filter(l => /^A\\d+:\\s*/i.test(l)).map(l => l.replace(/^A\\d+:\\s*/i, '')).filter(t => t && t !== '[transcription unavailable]' && t !== '[Transcription failed]');\n  return answers.join(' ');\n}\nfunction parseQAPairs(transcript) {\n  const lines = transcript.split('\\n').filter(line => line.trim());\n  const qaPairs = [];\n  for (let i = 0; i < lines.length; i += 2) {\n    var _lines$i, _lines;\n    if ((_lines$i = lines[i]) !== null && _lines$i !== void 0 && _lines$i.startsWith('Q') && (_lines = lines[i + 1]) !== null && _lines !== void 0 && _lines.startsWith('A')) {\n      const question = lines[i].replace(/^Q\\d+:\\s*/, '');\n      const answer = lines[i + 1].replace(/^A\\d+:\\s*/, '');\n      qaPairs.push({\n        questionNumber: Math.floor(i / 2) + 1,\n        question,\n        answer\n      });\n    }\n  }\n  return qaPairs;\n}\nexport async function analyzeTranscriptWithGemini(transcript, meta) {\n  var _answersText$match;\n  const answersText = extractAnswerText(transcript);\n  const hasAnswers = answersText.trim().length > 0;\n  const qaPairs = parseQAPairs(transcript);\n\n  // Try backend OpenAI API first\n  if (hasAnswers && qaPairs.length > 0) {\n    try {\n      const res = await fetch('http://localhost:3001/api/openai/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          transcript,\n          qaPairs,\n          meta\n        })\n      });\n      if (res.ok) {\n        return await res.json();\n      }\n    } catch (error) {\n      console.warn('OpenAI API failed, using fallback:', error);\n    }\n  }\n  if (!hasAnswers) {\n    return {\n      summary: 'We could not detect clear spoken answers from the transcript. Please ensure your mic permissions are granted and try again.',\n      metrics: {\n        fillerWords: 0,\n        speakingRateWpm: 0\n      },\n      questionAnalysis: [],\n      decision: {\n        pass: false,\n        rationale: 'Insufficient transcript to evaluate.'\n      }\n    };\n  }\n\n  // Fallback analysis\n  const fillerMatches = (_answersText$match = answersText.match(/\\b(um+|uh+|like|you know|basically|actually)\\b/gi)) !== null && _answersText$match !== void 0 ? _answersText$match : [];\n  const words = answersText.trim().split(/\\s+/).filter(Boolean);\n  const minutes = Math.max(1, words.length / 150);\n  const speakingRateWpm = Math.round(words.length / minutes);\n  const fillerWords = fillerMatches.length;\n\n  // Basic STAR method detection\n  const starKeywords = ['situation', 'task', 'action', 'result', 'challenge', 'problem', 'solution', 'outcome'];\n  const hasStarElements = starKeywords.some(keyword => answersText.toLowerCase().includes(keyword));\n\n  // Generate per-question analysis\n  const questionAnalysis = qaPairs.map((qa, index) => {\n    const answerWords = qa.answer.toLowerCase();\n    const hasStar = starKeywords.some(keyword => answerWords.includes(keyword));\n    const relevance = Math.min(100, Math.max(0, 60 + Math.random() * 30)); // Placeholder\n\n    return {\n      questionNumber: qa.questionNumber,\n      question: qa.question,\n      answer: qa.answer,\n      starMethod: hasStar,\n      relevance: Math.round(relevance),\n      feedback: hasStar ? 'Good use of structured response with specific examples' : 'Consider using the STAR method (Situation, Task, Action, Result) for more structured answers'\n    };\n  });\n  const pass = fillerWords <= 10 && speakingRateWpm >= 100 && speakingRateWpm <= 200;\n  return {\n    summary: 'Analysis completed using fallback method. Connect Gemini API for more detailed insights.',\n    metrics: {\n      fillerWords,\n      speakingRateWpm\n    },\n    questionAnalysis,\n    decision: {\n      pass,\n      rationale: pass ? 'Meets baseline performance standards' : 'Falls below one or more thresholds (filler words, speaking rate)'\n    }\n  };\n}","map":{"version":3,"names":["extractAnswerText","transcript","lines","split","map","s","trim","answers","filter","l","test","replace","t","join","parseQAPairs","line","qaPairs","i","length","_lines$i","_lines","startsWith","question","answer","push","questionNumber","Math","floor","analyzeTranscriptWithGemini","meta","_answersText$match","answersText","hasAnswers","res","fetch","method","headers","body","JSON","stringify","ok","json","error","console","warn","summary","metrics","fillerWords","speakingRateWpm","questionAnalysis","decision","pass","rationale","fillerMatches","match","words","Boolean","minutes","max","round","starKeywords","hasStarElements","some","keyword","toLowerCase","includes","qa","index","answerWords","hasStar","relevance","min","random","starMethod","feedback"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/services/voiceAnalysisService.ts"],"sourcesContent":["export type AnalysisRequestMeta = {\n  company: string;\n  questionCount: number;\n};\n\nfunction extractAnswerText(transcript: string): string {\n  const lines = transcript.split(/\\n+/).map(s => s.trim());\n  const answers = lines\n    .filter(l => /^A\\d+:\\s*/i.test(l))\n    .map(l => l.replace(/^A\\d+:\\s*/i, ''))\n    .filter(t => t && t !== '[transcription unavailable]' && t !== '[Transcription failed]');\n  return answers.join(' ');\n}\n\nfunction parseQAPairs(transcript: string) {\n  const lines = transcript.split('\\n').filter(line => line.trim());\n  const qaPairs = [];\n  \n  for (let i = 0; i < lines.length; i += 2) {\n    if (lines[i]?.startsWith('Q') && lines[i + 1]?.startsWith('A')) {\n      const question = lines[i].replace(/^Q\\d+:\\s*/, '');\n      const answer = lines[i + 1].replace(/^A\\d+:\\s*/, '');\n      qaPairs.push({\n        questionNumber: Math.floor(i / 2) + 1,\n        question,\n        answer\n      });\n    }\n  }\n  \n  return qaPairs;\n}\n\nexport async function analyzeTranscriptWithGemini(transcript: string, meta: AnalysisRequestMeta): Promise<any> {\n  const answersText = extractAnswerText(transcript);\n  const hasAnswers = answersText.trim().length > 0;\n  const qaPairs = parseQAPairs(transcript);\n\n  // Try backend OpenAI API first\n  if (hasAnswers && qaPairs.length > 0) {\n    try {\n      const res = await fetch('http://localhost:3001/api/openai/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          transcript, \n          qaPairs,\n          meta \n        })\n      });\n      if (res.ok) {\n        return await res.json();\n      }\n    } catch (error) {\n      console.warn('OpenAI API failed, using fallback:', error);\n    }\n  }\n\n  if (!hasAnswers) {\n    return {\n      summary: 'We could not detect clear spoken answers from the transcript. Please ensure your mic permissions are granted and try again.',\n      metrics: {\n        fillerWords: 0,\n        speakingRateWpm: 0\n      },\n      questionAnalysis: [],\n      decision: { pass: false, rationale: 'Insufficient transcript to evaluate.' }\n    };\n  }\n\n  // Fallback analysis\n  const fillerMatches = answersText.match(/\\b(um+|uh+|like|you know|basically|actually)\\b/gi) ?? [];\n  const words = answersText.trim().split(/\\s+/).filter(Boolean);\n  const minutes = Math.max(1, words.length / 150);\n  const speakingRateWpm = Math.round(words.length / minutes);\n  const fillerWords = fillerMatches.length;\n\n  // Basic STAR method detection\n  const starKeywords = ['situation', 'task', 'action', 'result', 'challenge', 'problem', 'solution', 'outcome'];\n  const hasStarElements = starKeywords.some(keyword => \n    answersText.toLowerCase().includes(keyword)\n  );\n\n  // Generate per-question analysis\n  const questionAnalysis = qaPairs.map((qa, index) => {\n    const answerWords = qa.answer.toLowerCase();\n    const hasStar = starKeywords.some(keyword => answerWords.includes(keyword));\n    const relevance = Math.min(100, Math.max(0, 60 + Math.random() * 30)); // Placeholder\n    \n    return {\n      questionNumber: qa.questionNumber,\n      question: qa.question,\n      answer: qa.answer,\n      starMethod: hasStar,\n      relevance: Math.round(relevance),\n      feedback: hasStar \n        ? 'Good use of structured response with specific examples'\n        : 'Consider using the STAR method (Situation, Task, Action, Result) for more structured answers'\n    };\n  });\n\n  const pass = fillerWords <= 10 && speakingRateWpm >= 100 && speakingRateWpm <= 200;\n\n  return {\n    summary: 'Analysis completed using fallback method. Connect Gemini API for more detailed insights.',\n    metrics: { \n      fillerWords, \n      speakingRateWpm\n    },\n    questionAnalysis,\n    decision: { \n      pass, \n      rationale: pass \n        ? 'Meets baseline performance standards' \n        : 'Falls below one or more thresholds (filler words, speaking rate)' \n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}