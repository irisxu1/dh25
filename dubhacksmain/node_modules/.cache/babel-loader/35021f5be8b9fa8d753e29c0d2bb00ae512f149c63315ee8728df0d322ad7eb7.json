{"ast":null,"code":"var _jsxFileName = \"/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUESTIONS = [\"Tell me about yourself and your background.\", \"What are your greatest strengths?\", \"Describe a challenging situation you've faced and how you handled it.\", \"Where do you see yourself in 5 years?\", \"Why do you want to work for our company?\"];\nexport default function InterviewRecorder({\n  onStop\n}) {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(30);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState('');\n  const [recordings, setRecordings] = useState([]);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const streamRef = useRef(null);\n  const thinkingTimerRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  useEffect(() => {\n    // Setup camera and microphone access\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        width: 1280,\n        height: 720\n      },\n      audio: true\n    }).then(stream => {\n      streamRef.current = stream;\n\n      // Set up video element\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      const mr = new MediaRecorder(stream, {\n        mimeType: 'video/webm;codecs=vp9,opus'\n      });\n      mr.ondataavailable = e => chunksRef.current.push(e.data);\n      mr.onstop = async () => {\n        const videoBlob = new Blob(chunksRef.current, {\n          type: 'video/webm'\n        });\n        chunksRef.current = [];\n\n        // Create video URL for playback\n        const videoUrl = URL.createObjectURL(videoBlob);\n\n        // Store the video recording\n        setRecordings(prev => [...prev, {\n          questionNumber: currentQuestion + 1,\n          question: QUESTIONS[currentQuestion],\n          videoUrl,\n          videoBlob,\n          size: videoBlob.size\n        }]);\n\n        // Extract audio for transcription\n        const audioBlob = await extractAudioFromVideo(videoBlob);\n\n        // Transcribe the audio\n        setStatus('Transcribing your answer...');\n        try {\n          const transcription = await elevenLabsService.speechToText(audioBlob);\n          const answerText = transcription || '';\n\n          // Store the answer for this question\n          setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: ${answerText}\\n`);\n        } catch (error) {\n          console.error('Transcription failed:', error);\n          setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: [Transcription failed]\\n`);\n        }\n      };\n      mediaRecorderRef.current = mr;\n    }).catch(() => setStatus('Camera/Microphone permission denied.'));\n\n    // Cleanup function\n    return () => {\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async videoBlob => {\n    return new Promise(resolve => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n  const askQuestion = async () => {\n    if (currentQuestion >= QUESTIONS.length) return;\n    const question = QUESTIONS[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n  const startRecording = () => {\n    if (!mediaRecorderRef.current) return;\n\n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      console.log('MediaRecorder is already recording');\n      return;\n    }\n    setIsRecording(true);\n    setRecordingTime(0);\n    setStatus('Recording your answer...');\n    chunksRef.current = [];\n    try {\n      mediaRecorderRef.current.start();\n\n      // Start recording timer\n      recordingTimerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      setIsRecording(false);\n      setStatus('Failed to start recording. Please try again.');\n    }\n  };\n  const stopRecording = async () => {\n    if (!mediaRecorderRef.current || !isRecording) return;\n\n    // Check if MediaRecorder is actually recording\n    if (mediaRecorderRef.current.state !== 'recording') {\n      console.log('MediaRecorder is not recording');\n      setIsRecording(false);\n      return;\n    }\n    setIsRecording(false);\n    setStatus('Processing your answer...');\n\n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    try {\n      mediaRecorderRef.current.stop();\n\n      // Wait a moment for transcription to complete\n      setTimeout(() => {\n        if (currentQuestion < QUESTIONS.length - 1) {\n          setCurrentQuestion(prev => prev + 1);\n          setStatus('Click \"Ask Question\" for the next question.');\n        } else {\n          // All questions completed, analyze with Gemini\n          setStatus('Analyzing your interview...');\n          analyzeInterview();\n        }\n      }, 2000);\n    } catch (error) {\n      console.error('Failed to stop recording:', error);\n      setStatus('Failed to stop recording. Please try again.');\n    }\n  };\n  const analyzeInterview = async () => {\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: 'Interview Practice',\n        questionCount: QUESTIONS.length\n      });\n      onStop({\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: {\n          fillerWords: 0,\n          speakingRateWpm: 0\n        },\n        strengths: [],\n        improvements: ['Try again'],\n        decision: {\n          pass: false,\n          rationale: 'Analysis failed'\n        }\n      });\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\",\n        children: \"\\u2728 Interview Practice \\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\",\n        children: [\"Question \", currentQuestion + 1, \" of \", QUESTIONS.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), currentQuestion < QUESTIONS.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-bold text-pink-800 mb-3 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-5 h-5 text-pink-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), \"Current Question:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-pink-700 text-lg leading-relaxed\",\n        children: QUESTIONS[currentQuestion]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-pink-700 font-medium\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), (isThinking || isRecording) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-flex items-center gap-2 bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          className: \"w-4 h-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold\",\n          children: isThinking ? `Think: ${thinkingTime}s` : `Recording: ${formatTime(recordingTime)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative bg-black rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: true,\n        className: \"w-full h-64 object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 flex items-center gap-2 bg-red-500 text-white px-3 py-1 rounded-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-2 h-2 bg-white rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-medium\",\n          children: \"REC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-3 justify-center\",\n      children: [!isThinking && !isRecording && currentQuestion < QUESTIONS.length && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-6 py-3 rounded-xl bg-indigo-600 text-white font-semibold hover:bg-indigo-700 transition-colors flex items-center gap-2\",\n        onClick: askQuestion,\n        children: [/*#__PURE__*/_jsxDEV(Play, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), \"Ask Question\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this), isThinking && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-6 py-3 rounded-xl bg-green-600 text-white font-semibold hover:bg-green-700 transition-colors flex items-center gap-2\",\n        onClick: skipThinking,\n        children: [/*#__PURE__*/_jsxDEV(Mic, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), \"Skip & Start Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-6 py-3 rounded-xl bg-red-600 text-white font-semibold hover:bg-red-700 transition-colors flex items-center gap-2\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), \"Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-indigo-600 h-2 rounded-full transition-all duration-300\",\n        style: {\n          width: `${Math.min(100, (currentQuestion + 1) / QUESTIONS.length * 100)}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewRecorder, \"QIMu4udLQhvwI5vq+cDXPghp1QE=\");\n_c = InterviewRecorder;\nvar _c;\n$RefreshReg$(_c, \"InterviewRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Play","Square","Mic","Clock","Sparkles","elevenLabsService","analyzeTranscriptWithGemini","jsxDEV","_jsxDEV","QUESTIONS","InterviewRecorder","onStop","_s","currentQuestion","setCurrentQuestion","isRecording","setIsRecording","isThinking","setIsThinking","thinkingTime","setThinkingTime","recordingTime","setRecordingTime","status","setStatus","transcript","setTranscript","recordings","setRecordings","videoRef","mediaRecorderRef","chunksRef","streamRef","thinkingTimerRef","recordingTimerRef","navigator","mediaDevices","getUserMedia","video","width","height","audio","then","stream","current","srcObject","mr","MediaRecorder","mimeType","ondataavailable","e","push","data","onstop","videoBlob","Blob","type","videoUrl","URL","createObjectURL","prev","questionNumber","question","size","audioBlob","extractAudioFromVideo","transcription","speechToText","answerText","error","console","catch","clearInterval","getTracks","forEach","track","stop","Promise","resolve","document","createElement","canvas","audioContext","AudioContext","src","onloadedmetadata","askQuestion","length","generateQuestionAudio","play","startThinkingTimer","setInterval","startRecording","skipThinking","state","log","start","stopRecording","setTimeout","analyzeInterview","analysis","company","questionCount","createdAt","Date","toISOString","summary","metrics","fillerWords","speakingRateWpm","strengths","improvements","decision","pass","rationale","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","onClick","style","min","_c","$RefreshReg$"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Video, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\n\ninterface InterviewRecorderProps {\n  onStop: (results: any) => void;\n}\n\nconst QUESTIONS = [\n  \"Tell me about yourself and your background.\",\n  \"What are your greatest strengths?\",\n  \"Describe a challenging situation you've faced and how you handled it.\",\n  \"Where do you see yourself in 5 years?\",\n  \"Why do you want to work for our company?\"\n];\n\nexport default function InterviewRecorder({ onStop }: InterviewRecorderProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(30);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState<string>('');\n  const [recordings, setRecordings] = useState<any[]>([]);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const chunksRef = useRef<BlobPart[]>([]);\n  const streamRef = useRef<MediaStream | null>(null);\n  const thinkingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const recordingTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    // Setup camera and microphone access\n    navigator.mediaDevices.getUserMedia({ \n      video: { width: 1280, height: 720 },\n      audio: true \n    })\n      .then((stream) => {\n        streamRef.current = stream;\n        \n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        \n        const mr = new MediaRecorder(stream, {\n          mimeType: 'video/webm;codecs=vp9,opus'\n        });\n        \n        mr.ondataavailable = (e) => chunksRef.current.push(e.data);\n        mr.onstop = async () => {\n          const videoBlob = new Blob(chunksRef.current, { type: 'video/webm' });\n          chunksRef.current = [];\n          \n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n          \n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQuestion + 1,\n            question: QUESTIONS[currentQuestion],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size\n          }]);\n          \n          // Extract audio for transcription\n          const audioBlob = await extractAudioFromVideo(videoBlob);\n          \n          // Transcribe the audio\n          setStatus('Transcribing your answer...');\n          try {\n            const transcription = await elevenLabsService.speechToText(audioBlob);\n            const answerText = transcription || '';\n            \n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: ${answerText}\\n`);\n          } catch (error) {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: [Transcription failed]\\n`);\n          }\n        };\n        mediaRecorderRef.current = mr;\n      })\n      .catch(() => setStatus('Camera/Microphone permission denied.'));\n\n    // Cleanup function\n    return () => {\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async (videoBlob: Blob): Promise<Blob> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      \n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n\n  const askQuestion = async () => {\n    if (currentQuestion >= QUESTIONS.length) return;\n    \n    const question = QUESTIONS[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    \n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    \n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current!);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n\n  const startRecording = () => {\n    if (!mediaRecorderRef.current) return;\n    \n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      console.log('MediaRecorder is already recording');\n      return;\n    }\n    \n    setIsRecording(true);\n    setRecordingTime(0);\n    setStatus('Recording your answer...');\n    chunksRef.current = [];\n    \n    try {\n      mediaRecorderRef.current.start();\n      \n      // Start recording timer\n      recordingTimerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      setIsRecording(false);\n      setStatus('Failed to start recording. Please try again.');\n    }\n  };\n\n  const stopRecording = async () => {\n    if (!mediaRecorderRef.current || !isRecording) return;\n    \n    // Check if MediaRecorder is actually recording\n    if (mediaRecorderRef.current.state !== 'recording') {\n      console.log('MediaRecorder is not recording');\n      setIsRecording(false);\n      return;\n    }\n    \n    setIsRecording(false);\n    setStatus('Processing your answer...');\n    \n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    \n    try {\n      mediaRecorderRef.current.stop();\n      \n      // Wait a moment for transcription to complete\n      setTimeout(() => {\n        if (currentQuestion < QUESTIONS.length - 1) {\n          setCurrentQuestion(prev => prev + 1);\n          setStatus('Click \"Ask Question\" for the next question.');\n        } else {\n          // All questions completed, analyze with Gemini\n          setStatus('Analyzing your interview...');\n          analyzeInterview();\n        }\n      }, 2000);\n    } catch (error) {\n      console.error('Failed to stop recording:', error);\n      setStatus('Failed to stop recording. Please try again.');\n    }\n  };\n\n  const analyzeInterview = async () => {\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: 'Interview Practice',\n        questionCount: QUESTIONS.length\n      });\n\n      onStop({\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: { fillerWords: 0, speakingRateWpm: 0 },\n        strengths: [],\n        improvements: ['Try again'],\n        decision: { pass: false, rationale: 'Analysis failed' }\n      });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\">\n          ✨ Interview Practice ✨\n        </h2>\n        <div className=\"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\">\n          Question {currentQuestion + 1} of {QUESTIONS.length}\n        </div>\n      </div>\n\n      {/* Current Question Display */}\n      {currentQuestion < QUESTIONS.length && (\n        <div className=\"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\">\n          <h3 className=\"font-bold text-pink-800 mb-3 flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-pink-500\" />\n            Current Question:\n          </h3>\n          <p className=\"text-pink-700 text-lg leading-relaxed\">{QUESTIONS[currentQuestion]}</p>\n        </div>\n      )}\n\n      {/* Status Display */}\n      <div className=\"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\">\n        <p className=\"text-sm text-pink-700 font-medium\">{status}</p>\n      </div>\n\n      {/* Timer Display */}\n      {(isThinking || isRecording) && (\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center gap-2 bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"font-semibold\">\n              {isThinking ? `Think: ${thinkingTime}s` : `Recording: ${formatTime(recordingTime)}`}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Video Display */}\n      <div className=\"relative bg-black rounded-lg overflow-hidden\">\n        <video\n          ref={videoRef}\n          autoPlay\n          muted\n          className=\"w-full h-64 object-cover\"\n        />\n        {isRecording && (\n          <div className=\"absolute top-4 left-4 flex items-center gap-2 bg-red-500 text-white px-3 py-1 rounded-full\">\n            <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"text-sm font-medium\">REC</span>\n          </div>\n        )}\n      </div>\n\n      {/* Control Buttons */}\n      <div className=\"flex gap-3 justify-center\">\n        {!isThinking && !isRecording && currentQuestion < QUESTIONS.length && (\n          <button\n            className=\"px-6 py-3 rounded-xl bg-indigo-600 text-white font-semibold hover:bg-indigo-700 transition-colors flex items-center gap-2\"\n            onClick={askQuestion}\n          >\n            <Play className=\"w-5 h-5\" />\n            Ask Question\n          </button>\n        )}\n        \n        {isThinking && (\n          <button\n            className=\"px-6 py-3 rounded-xl bg-green-600 text-white font-semibold hover:bg-green-700 transition-colors flex items-center gap-2\"\n            onClick={skipThinking}\n          >\n            <Mic className=\"w-5 h-5\" />\n            Skip & Start Recording\n          </button>\n        )}\n        \n        {isRecording && (\n          <button\n            className=\"px-6 py-3 rounded-xl bg-red-600 text-white font-semibold hover:bg-red-700 transition-colors flex items-center gap-2\"\n            onClick={stopRecording}\n          >\n            <Square className=\"w-5 h-5\" />\n            Stop Recording\n          </button>\n        )}\n      </div>\n\n      {/* Progress Indicator */}\n      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n        <div \n          className=\"bg-indigo-600 h-2 rounded-full transition-all duration-300\"\n          style={{ width: `${Math.min(100, ((currentQuestion + 1) / QUESTIONS.length) * 100)}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}