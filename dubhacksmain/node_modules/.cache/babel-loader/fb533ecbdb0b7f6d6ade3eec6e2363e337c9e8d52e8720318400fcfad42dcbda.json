{"ast":null,"code":"var _jsxFileName = \"/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Company-specific question sets\nconst COMPANY_QUESTIONS = {\n  Amazon: [\"Describe a time when you used data to make a decision.\", \"Tell me about a time you disagreed with your manager. How did you handle it?\", \"Describe a situation where you had to prioritize multiple tasks.\", \"Give an example of when you went above and beyond for a customer.\", \"How do you handle tight deadlines while maintaining quality?\"],\n  \"T-Mobile\": [\"How would you handle a dissatisfied customer?\", \"Tell me about a time you collaborated with a team to meet a goal.\", \"Describe a situation where innovation led to success.\", \"How do you keep yourself motivated in a fast-paced environment?\", \"What does the T-Mobile brand mean to you?\"],\n  Atlassian: [\"Describe a time when you improved a process or workflow.\", \"How do you handle feedback from multiple stakeholders?\", \"Tell me about a technical project you’re proud of.\", \"How do you ensure collaboration within distributed teams?\", \"Which Atlassian product do you admire and why?\"],\n  ElevenLabs: [\"What excites you about voice AI and speech synthesis?\", \"Tell me about a project where you used AI or ML tools.\", \"Describe a time when creativity helped you solve a technical challenge.\", \"How would you evaluate the quality of generated voice data?\", \"How do you stay current with advances in AI research?\"],\n  Statsig: [\"What is your experience with A/B testing or experimentation?\", \"Tell me about a time you used data to validate an assumption.\", \"How would you design an experiment to test a new product feature?\", \"Describe a situation where data contradicted your expectations.\", \"How would you explain statistical significance to a non-technical audience?\"]\n};\nexport default function InterviewRecorder({\n  company,\n  onStop,\n  onCancel\n}) {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  // Use the questions for the selected company\n  const QUESTIONS = COMPANY_QUESTIONS[company];\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(5);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState('');\n  const [recordings, setRecordings] = useState([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const streamRef = useRef(null);\n  const thinkingTimerRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const currentQuestionRef = useRef(0);\n  const isTranscribingRef = useRef(false);\n\n  // Update the ref whenever currentQuestion changes\n  useEffect(() => {\n    currentQuestionRef.current = currentQuestion;\n  }, [currentQuestion]);\n\n  // Initialize random questions\n  useEffect(() => {\n    const randomQuestions = getRandomQuestions();\n    setQuestions(randomQuestions);\n    console.log('Questions initialized:', randomQuestions.length, 'questions:', randomQuestions);\n  }, []);\n  useEffect(() => {\n    let isMounted = true;\n\n    // Setup camera and microphone access\n    const setupMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: {\n              ideal: 1920\n            },\n            height: {\n              ideal: 1080\n            },\n            aspectRatio: {\n              ideal: 16 / 9\n            }\n          },\n          audio: true\n        });\n        if (!isMounted) {\n          stream.getTracks().forEach(track => track.stop());\n          return;\n        }\n        streamRef.current = stream;\n\n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n\n        // Check for supported MIME types\n        let mimeType = 'video/webm;codecs=vp9,opus';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'video/webm';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'video/mp4';\n          }\n        }\n        const mr = new MediaRecorder(stream, {\n          mimeType: mimeType\n        });\n        mr.ondataavailable = e => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n        mr.onstop = async () => {\n          if (chunksRef.current.length === 0) {\n            setStatus('No recording data captured. Please try again.');\n            return;\n          }\n          const videoBlob = new Blob(chunksRef.current, {\n            type: mimeType\n          });\n          chunksRef.current = [];\n\n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n\n          // Get current question from ref\n          const currentQ = currentQuestionRef.current;\n\n          // Save video locally with company naming\n          const fileName = `${company.toLowerCase().replace(/\\s+/g, '')}q${currentQ + 1}.webm`;\n          const link = document.createElement('a');\n          link.href = videoUrl;\n          link.download = fileName;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQ + 1,\n            question: questions[currentQ],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size,\n            fileName: fileName\n          }]);\n\n          // Progress to next question immediately (don't wait for transcription)\n          setTimeout(() => {\n            const nextQuestion = currentQuestionRef.current + 1;\n            console.log('Progressing from question', currentQuestionRef.current, 'to', nextQuestion, 'of', questions.length, 'total questions');\n            if (questions.length === 0) {\n              console.log('Questions not loaded, cannot progress');\n              return;\n            }\n            if (nextQuestion < questions.length) {\n              setCurrentQuestion(nextQuestion);\n              setStatus('Click \"Ask Question\" for the next question.');\n            } else {\n              // All questions completed, analyze with OpenAI\n              setStatus('Analyzing your interview...');\n              analyzeInterview();\n            }\n          }, 1000); // Reduced from 2000ms to 1000ms for faster progression\n\n          // Transcribe the audio in the background (don't block progression)\n          setIsTranscribing(true);\n          isTranscribingRef.current = true;\n          const transcriptionPromise = extractAudioFromVideo(videoBlob).then(audioBlob => {\n            setStatus('Transcribing your answer...');\n            return elevenLabsService.speechToText(audioBlob);\n          }).then(transcription => {\n            const answerText = transcription || '';\n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${QUESTIONS[currentQ]}\\nA${currentQ + 1}: ${answerText}\\n`);\n            setIsTranscribing(false);\n            isTranscribingRef.current = false;\n          }).catch(error => {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${QUESTIONS[currentQ]}\\nA${currentQ + 1}: [Transcription failed]\\n`);\n            setIsTranscribing(false);\n            isTranscribingRef.current = false;\n          });\n\n          // Auto-progress after 5 seconds if transcription is still running\n          setTimeout(() => {\n            if (isTranscribingRef.current) {\n              console.log('Auto-progressing after 5 seconds - transcription still running');\n              setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${QUESTIONS[currentQ]}\\nA${currentQ + 1}: [Transcription in progress - auto-skipped]\\n`);\n              setIsTranscribing(false);\n              isTranscribingRef.current = false;\n            }\n          }, 5000); // 5 second auto-progress\n\n          // Add a longer timeout to prevent transcription from hanging completely\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Transcription timeout')), 30000); // 30 second timeout\n          });\n          Promise.race([transcriptionPromise, timeoutPromise]).catch(error => {\n            console.error('Transcription timeout or failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${questions[currentQ]}\\nA${currentQ + 1}: [Transcription timeout]\\n`);\n            setIsTranscribing(false);\n            isTranscribingRef.current = false;\n          });\n        };\n        mediaRecorderRef.current = mr;\n        setStatus('Ready to start interview. Click \"Ask Question\" to begin.');\n      } catch (error) {\n        console.error('Media setup failed:', error);\n        setStatus('Camera/Microphone permission denied or not available.');\n      }\n    };\n    setupMedia();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async videoBlob => {\n    return new Promise(resolve => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n  const askQuestion = async () => {\n    console.log('Ask question called - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length, 'QUESTIONS array:', QUESTIONS);\n    if (QUESTIONS.length === 0) {\n      console.log('Questions not loaded yet, waiting...');\n      return;\n    }\n    if (currentQuestion >= QUESTIONS.length) return;\n    const question = QUESTIONS[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n  const nextQuestion = () => {\n    console.log('Next question called - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length);\n    if (QUESTIONS.length === 0) {\n      console.log('Questions not loaded, cannot progress');\n      return;\n    }\n    if (currentQuestion < QUESTIONS.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setStatus('Click \"Ask Question\" for the next question.');\n    } else {\n      setStatus('Analyzing your interview...');\n      analyzeInterview();\n    }\n  };\n  const goToSummary = () => {\n    console.log('Go to summary called - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length);\n    setStatus('Analyzing your interview...');\n    analyzeInterview();\n  };\n  const startRecording = () => {\n    // Clear any existing recording timer first\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n\n    // Always set recording state to true first, regardless of MediaRecorder state\n    setIsRecording(true);\n    setRecordingTime(0);\n    setStatus('Recording your answer...');\n    chunksRef.current = [];\n\n    // Start recording timer immediately\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n    if (!mediaRecorderRef.current) {\n      return;\n    }\n\n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      return;\n    }\n\n    // Check if MediaRecorder is in a valid state\n    if (mediaRecorderRef.current.state === 'inactive') {\n      try {\n        mediaRecorderRef.current.start(100); // Start with 100ms timeslice\n      } catch (error) {\n        console.error('Failed to start MediaRecorder:', error);\n        // Don't set isRecording to false here - keep the button showing\n      }\n    }\n  };\n  const stopRecording = async () => {\n    if (!isRecording) {\n      return;\n    }\n    setIsRecording(false);\n    setStatus('Processing your answer...');\n\n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n\n    // Try to stop MediaRecorder if it exists and is recording\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n\n        // The onstop event handler will handle the rest\n        // We don't need to manually progress here as it's handled in the onstop callback\n      } catch (error) {\n        console.error('Failed to stop recording:', error);\n        setStatus('Failed to stop recording. Please try again.');\n      }\n    } else {\n      // If MediaRecorder wasn't actually recording, manually progress to next question\n      setTimeout(() => {\n        const nextQuestion = currentQuestionRef.current + 1;\n        if (questions.length === 0) {\n          console.log('Questions not loaded, cannot progress manually');\n          return;\n        }\n        if (nextQuestion < questions.length) {\n          setCurrentQuestion(nextQuestion);\n          setStatus('Click \"Ask Question\" for the next question.');\n        } else {\n          // All questions completed, analyze with OpenAI\n          setStatus('Analyzing your interview...');\n          analyzeInterview();\n        }\n      }, 1000);\n    }\n  };\n  const analyzeInterview = async () => {\n    console.log('Analyzing interview - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length, 'transcript length:', transcript.length);\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: company,\n        questionCount: QUESTIONS.length\n      });\n      onStop({\n        company,\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        company,\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: {\n          fillerWords: 0,\n          speakingRateWpm: 0\n        },\n        questionAnalysis: [],\n        decision: {\n          pass: false,\n          rationale: 'Analysis failed'\n        }\n      });\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\",\n        children: \"\\u2728 Interview Practice \\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\",\n          children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCancel,\n          className: \"px-4 py-2 rounded-xl bg-gray-500 hover:bg-gray-600 text-white font-medium transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this), questions.length > 0 && currentQuestion < questions.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-bold text-pink-800 mb-3 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-5 h-5 text-pink-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this), currentQuestion === questions.length - 1 ? 'Final Question:' : 'Current Question:']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-pink-700 text-lg leading-relaxed\",\n        children: questions[currentQuestion]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this), currentQuestion === questions.length - 1 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-pink-600 text-sm mt-2 font-medium\",\n        children: \"\\uD83C\\uDF89 This is your last question! You can end the interview anytime.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-pink-700 font-medium\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-3 h-3 bg-red-500 rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-red-600 font-bold\",\n          children: [\"Recording: \", formatTime(recordingTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }, this), (isThinking || isRecording) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-pink-100 text-pink-800 px-6 py-3 rounded-2xl border border-pink-200\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-bold text-lg\",\n          children: isThinking ? `💭 Think: ${thinkingTime}s` : `🎬 Recording: ${formatTime(recordingTime)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative bg-black rounded-2xl overflow-hidden border-2 border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: true,\n        className: \"w-full h-[32rem] object-cover transform scale-x-[-1]\",\n        style: {\n          transform: 'scaleX(-1)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 flex items-center gap-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-full shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-3 h-3 bg-white rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-bold\",\n          children: [\"\\uD83C\\uDFAC REC \", formatTime(recordingTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-4 justify-center\",\n      children: [!isThinking && !isRecording && questions.length > 0 && currentQuestion < questions.length && status.includes('Ask Question') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-pink-500 to-yellow-500 text-white font-bold hover:from-pink-600 hover:to-yellow-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: askQuestion,\n        children: [/*#__PURE__*/_jsxDEV(Play, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 17\n        }, this), \"\\uD83C\\uDFA4 Ask Question\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 15\n      }, this), isThinking && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: skipThinking,\n        children: [/*#__PURE__*/_jsxDEV(Mic, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 17\n        }, this), \"\\u26A1 Skip & Start Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 15\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-10 py-5 rounded-2xl bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold hover:from-red-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-xl flex items-center gap-3 animate-pulse\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          className: \"w-7 h-7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 17\n        }, this), \"\\uD83D\\uDED1 Stop Recording (\", formatTime(recordingTime), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 15\n      }, this), !isThinking && !isRecording && questions.length > 0 && currentQuestion < questions.length - 1 && status.includes('Processing') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-blue-500 to-indigo-500 text-white font-bold hover:from-blue-600 hover:to-indigo-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: nextQuestion,\n        children: [/*#__PURE__*/_jsxDEV(Play, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 17\n        }, this), \"\\u27A1\\uFE0F Next Question\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 15\n      }, this), !isThinking && !isRecording && questions.length > 0 && currentQuestion === questions.length - 1 && status.includes('Processing') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: goToSummary,\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 17\n        }, this), \"\\u2728 Go to Summary\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 15\n      }, this), !isThinking && !isRecording && questions.length > 0 && currentQuestion === questions.length - 1 && status.includes('Ask Question') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: goToSummary,\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 17\n        }, this), \"\\u2728 End Interview & Go to Summary\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 15\n      }, this), isTranscribing && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold hover:from-orange-600 hover:to-red-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: () => {\n          setIsTranscribing(false);\n          isTranscribingRef.current = false;\n          setStatus('Transcription skipped. Click \"Ask Question\" for the next question.');\n        },\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 17\n        }, this), \"\\u23ED\\uFE0F Skip Transcription & Continue\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gradient-to-r from-pink-100 to-yellow-100 rounded-full h-3 border border-pink-200\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gradient-to-r from-pink-500 to-yellow-500 h-3 rounded-full transition-all duration-300 shadow-sm\",\n        style: {\n          width: `${Math.min(100, (currentQuestion + 1) / questions.length * 100)}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 457,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewRecorder, \"Ovl/7TcLFI6m7s6CMIZitphiV2Y=\");\n_c = InterviewRecorder;\nvar _c;\n$RefreshReg$(_c, \"InterviewRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Play","Square","Mic","Clock","Sparkles","elevenLabsService","analyzeTranscriptWithGemini","jsxDEV","_jsxDEV","COMPANY_QUESTIONS","Amazon","Atlassian","ElevenLabs","Statsig","InterviewRecorder","company","onStop","onCancel","_s","currentQuestion","setCurrentQuestion","QUESTIONS","isRecording","setIsRecording","isThinking","setIsThinking","thinkingTime","setThinkingTime","recordingTime","setRecordingTime","status","setStatus","transcript","setTranscript","recordings","setRecordings","isTranscribing","setIsTranscribing","videoRef","mediaRecorderRef","chunksRef","streamRef","thinkingTimerRef","recordingTimerRef","currentQuestionRef","isTranscribingRef","current","randomQuestions","getRandomQuestions","setQuestions","console","log","length","isMounted","setupMedia","stream","navigator","mediaDevices","getUserMedia","video","width","ideal","height","aspectRatio","audio","getTracks","forEach","track","stop","srcObject","mimeType","MediaRecorder","isTypeSupported","mr","ondataavailable","e","data","size","push","onstop","videoBlob","Blob","type","videoUrl","URL","createObjectURL","currentQ","fileName","toLowerCase","replace","link","document","createElement","href","download","body","appendChild","click","removeChild","prev","questionNumber","question","questions","setTimeout","nextQuestion","analyzeInterview","transcriptionPromise","extractAudioFromVideo","then","audioBlob","speechToText","transcription","answerText","catch","error","timeoutPromise","Promise","_","reject","Error","race","clearInterval","resolve","canvas","audioContext","AudioContext","src","onloadedmetadata","askQuestion","generateQuestionAudio","play","startThinkingTimer","setInterval","startRecording","skipThinking","goToSummary","state","start","stopRecording","analysis","questionCount","createdAt","Date","toISOString","summary","metrics","fillerWords","speakingRateWpm","questionAnalysis","decision","pass","rationale","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","children","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","muted","style","transform","includes","min","_c","$RefreshReg$"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Video, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport type { Company } from '../App';\n\ninterface InterviewRecorderProps {\n  company: Company;\n  onStop: (results: any) => void;\n  onCancel: () => void;\n}\n\n// Company-specific question sets\nconst COMPANY_QUESTIONS: Record<Company, string[]> = {\n  Amazon: [\n    \"Describe a time when you used data to make a decision.\",\n    \"Tell me about a time you disagreed with your manager. How did you handle it?\",\n    \"Describe a situation where you had to prioritize multiple tasks.\",\n    \"Give an example of when you went above and beyond for a customer.\",\n    \"How do you handle tight deadlines while maintaining quality?\",\n  ],\n  \"T-Mobile\": [\n    \"How would you handle a dissatisfied customer?\",\n    \"Tell me about a time you collaborated with a team to meet a goal.\",\n    \"Describe a situation where innovation led to success.\",\n    \"How do you keep yourself motivated in a fast-paced environment?\",\n    \"What does the T-Mobile brand mean to you?\",\n  ],\n  Atlassian: [\n    \"Describe a time when you improved a process or workflow.\",\n    \"How do you handle feedback from multiple stakeholders?\",\n    \"Tell me about a technical project you’re proud of.\",\n    \"How do you ensure collaboration within distributed teams?\",\n    \"Which Atlassian product do you admire and why?\",\n  ],\n  ElevenLabs: [\n    \"What excites you about voice AI and speech synthesis?\",\n    \"Tell me about a project where you used AI or ML tools.\",\n    \"Describe a time when creativity helped you solve a technical challenge.\",\n    \"How would you evaluate the quality of generated voice data?\",\n    \"How do you stay current with advances in AI research?\",\n  ],\n  Statsig: [\n    \"What is your experience with A/B testing or experimentation?\",\n    \"Tell me about a time you used data to validate an assumption.\",\n    \"How would you design an experiment to test a new product feature?\",\n    \"Describe a situation where data contradicted your expectations.\",\n    \"How would you explain statistical significance to a non-technical audience?\",\n  ],\n};\n\n\nexport default function InterviewRecorder({ company, onStop, onCancel }: InterviewRecorderProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  // Use the questions for the selected company\n  const QUESTIONS = COMPANY_QUESTIONS[company];\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(5);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState<string>('');\n  const [recordings, setRecordings] = useState<any[]>([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const chunksRef = useRef<BlobPart[]>([]);\n  const streamRef = useRef<MediaStream | null>(null);\n  const thinkingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const recordingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const currentQuestionRef = useRef<number>(0);\n  const isTranscribingRef = useRef<boolean>(false);\n\n  // Update the ref whenever currentQuestion changes\n  useEffect(() => {\n    currentQuestionRef.current = currentQuestion;\n  }, [currentQuestion]);\n\n\n  // Initialize random questions\n  useEffect(() => {\n    const randomQuestions = getRandomQuestions();\n    setQuestions(randomQuestions);\n    console.log('Questions initialized:', randomQuestions.length, 'questions:', randomQuestions);\n  }, []);\n\n  useEffect(() => {\n    let isMounted = true;\n    \n    // Setup camera and microphone access\n    const setupMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { \n            width: { ideal: 1920 },\n            height: { ideal: 1080 },\n            aspectRatio: { ideal: 16/9 }\n          },\n          audio: true\n        });\n        \n        if (!isMounted) {\n          stream.getTracks().forEach(track => track.stop());\n          return;\n        }\n        \n        streamRef.current = stream;\n        \n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        \n        // Check for supported MIME types\n        let mimeType = 'video/webm;codecs=vp9,opus';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'video/webm';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'video/mp4';\n          }\n        }\n        \n        const mr = new MediaRecorder(stream, {\n          mimeType: mimeType\n        });\n        \n        mr.ondataavailable = (e) => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n        \n        mr.onstop = async () => {\n          if (chunksRef.current.length === 0) {\n            setStatus('No recording data captured. Please try again.');\n            return;\n          }\n          \n          const videoBlob = new Blob(chunksRef.current, { type: mimeType });\n          chunksRef.current = [];\n          \n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n          \n          // Get current question from ref\n          const currentQ = currentQuestionRef.current;\n          \n          // Save video locally with company naming\n          const fileName = `${company.toLowerCase().replace(/\\s+/g, '')}q${currentQ + 1}.webm`;\n          const link = document.createElement('a');\n          link.href = videoUrl;\n          link.download = fileName;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          \n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQ + 1,\n            question: questions[currentQ],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size,\n            fileName: fileName\n          }]);\n          \n          // Progress to next question immediately (don't wait for transcription)\n          setTimeout(() => {\n            const nextQuestion = currentQuestionRef.current + 1;\n            console.log('Progressing from question', currentQuestionRef.current, 'to', nextQuestion, 'of', questions.length, 'total questions');\n            if (questions.length === 0) {\n              console.log('Questions not loaded, cannot progress');\n              return;\n            }\n            if (nextQuestion < questions.length) {\n              setCurrentQuestion(nextQuestion);\n              setStatus('Click \"Ask Question\" for the next question.');\n            } else {\n              // All questions completed, analyze with OpenAI\n              setStatus('Analyzing your interview...');\n              analyzeInterview();\n            }\n          }, 1000); // Reduced from 2000ms to 1000ms for faster progression\n          \n          // Transcribe the audio in the background (don't block progression)\n          setIsTranscribing(true);\n          isTranscribingRef.current = true;\n          const transcriptionPromise = extractAudioFromVideo(videoBlob).then(audioBlob => {\n            setStatus('Transcribing your answer...');\n            return elevenLabsService.speechToText(audioBlob);\n          }).then(transcription => {\n            const answerText = transcription || '';\n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${QUESTIONS[currentQ]}\\nA${currentQ + 1}: ${answerText}\\n`);\n            setIsTranscribing(false);\n            isTranscribingRef.current = false;\n          }).catch(error => {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${QUESTIONS[currentQ]}\\nA${currentQ + 1}: [Transcription failed]\\n`);\n            setIsTranscribing(false);\n            isTranscribingRef.current = false;\n          });\n          \n          // Auto-progress after 5 seconds if transcription is still running\n          setTimeout(() => {\n            if (isTranscribingRef.current) {\n              console.log('Auto-progressing after 5 seconds - transcription still running');\n              setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${QUESTIONS[currentQ]}\\nA${currentQ + 1}: [Transcription in progress - auto-skipped]\\n`);\n              setIsTranscribing(false);\n              isTranscribingRef.current = false;\n            }\n          }, 5000); // 5 second auto-progress\n          \n          // Add a longer timeout to prevent transcription from hanging completely\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Transcription timeout')), 30000); // 30 second timeout\n          });\n          \n          Promise.race([transcriptionPromise, timeoutPromise]).catch(error => {\n            console.error('Transcription timeout or failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${questions[currentQ]}\\nA${currentQ + 1}: [Transcription timeout]\\n`);\n            setIsTranscribing(false);\n            isTranscribingRef.current = false;\n          });\n        };\n        \n        mediaRecorderRef.current = mr;\n        setStatus('Ready to start interview. Click \"Ask Question\" to begin.');\n        \n      } catch (error) {\n        console.error('Media setup failed:', error);\n        setStatus('Camera/Microphone permission denied or not available.');\n      }\n    };\n    \n    setupMedia();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async (videoBlob: Blob): Promise<Blob> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      \n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n\n  const askQuestion = async () => {\n    console.log('Ask question called - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length, 'QUESTIONS array:', QUESTIONS);\n    if (QUESTIONS.length === 0) {\n      console.log('Questions not loaded yet, waiting...');\n      return;\n    }\n    if (currentQuestion >= QUESTIONS.length) return;\n\n    const question = QUESTIONS[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    \n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    \n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current!);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n\n  const nextQuestion = () => {\n    console.log('Next question called - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length);\n    if (QUESTIONS.length === 0) {\n      console.log('Questions not loaded, cannot progress');\n      return;\n    }\n    if (currentQuestion < QUESTIONS.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setStatus('Click \"Ask Question\" for the next question.');\n    } else {\n      setStatus('Analyzing your interview...');\n      analyzeInterview();\n    }\n  };\n\n  const goToSummary = () => {\n    console.log('Go to summary called - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length);\n    setStatus('Analyzing your interview...');\n    analyzeInterview();\n  };\n\n  const startRecording = () => {\n    // Clear any existing recording timer first\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    \n    // Always set recording state to true first, regardless of MediaRecorder state\n    setIsRecording(true);\n    setRecordingTime(0);\n    setStatus('Recording your answer...');\n    chunksRef.current = [];\n    \n    // Start recording timer immediately\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n    \n    if (!mediaRecorderRef.current) {\n      return;\n    }\n    \n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      return;\n    }\n    \n    // Check if MediaRecorder is in a valid state\n    if (mediaRecorderRef.current.state === 'inactive') {\n      try {\n        mediaRecorderRef.current.start(100); // Start with 100ms timeslice\n      } catch (error) {\n        console.error('Failed to start MediaRecorder:', error);\n        // Don't set isRecording to false here - keep the button showing\n      }\n    }\n  };\n\n  const stopRecording = async () => {\n    if (!isRecording) {\n      return;\n    }\n    \n    setIsRecording(false);\n    setStatus('Processing your answer...');\n    \n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    \n    // Try to stop MediaRecorder if it exists and is recording\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n        \n        // The onstop event handler will handle the rest\n        // We don't need to manually progress here as it's handled in the onstop callback\n        \n      } catch (error) {\n        console.error('Failed to stop recording:', error);\n        setStatus('Failed to stop recording. Please try again.');\n      }\n    } else {\n      // If MediaRecorder wasn't actually recording, manually progress to next question\n      setTimeout(() => {\n        const nextQuestion = currentQuestionRef.current + 1;\n        if (questions.length === 0) {\n          console.log('Questions not loaded, cannot progress manually');\n          return;\n        }\n        if (nextQuestion < questions.length) {\n          setCurrentQuestion(nextQuestion);\n          setStatus('Click \"Ask Question\" for the next question.');\n        } else {\n          // All questions completed, analyze with OpenAI\n          setStatus('Analyzing your interview...');\n          analyzeInterview();\n        }\n      }, 1000);\n    }\n  };\n\n  const analyzeInterview = async () => {\n    console.log('Analyzing interview - currentQuestion:', currentQuestion, 'QUESTIONS.length:', QUESTIONS.length, 'transcript length:', transcript.length);\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: company,\n        questionCount: QUESTIONS.length\n      });\n\n      onStop({\n        company,\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        company,\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: { fillerWords: 0, speakingRateWpm: 0 },\n        questionAnalysis: [],\n        decision: { pass: false, rationale: 'Analysis failed' }\n      });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\">\n          ✨ Interview Practice ✨\n        </h2>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\">\n            Question {currentQuestion + 1} of {questions.length}\n          </div>\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 rounded-xl bg-gray-500 hover:bg-gray-600 text-white font-medium transition-colors\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n\n      {/* Current Question Display */}\n      {questions.length > 0 && currentQuestion < questions.length && (\n        <div className=\"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\">\n          <h3 className=\"font-bold text-pink-800 mb-3 flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-pink-500\" />\n            {currentQuestion === questions.length - 1 ? 'Final Question:' : 'Current Question:'}\n          </h3>\n          <p className=\"text-pink-700 text-lg leading-relaxed\">{questions[currentQuestion]}</p>\n          {currentQuestion === questions.length - 1 && (\n            <p className=\"text-pink-600 text-sm mt-2 font-medium\">\n              🎉 This is your last question! You can end the interview anytime.\n            </p>\n          )}\n        </div>\n      )}\n\n      {/* Status Display */}\n      <div className=\"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\">\n        <p className=\"text-sm text-pink-700 font-medium\">{status}</p>\n        {isRecording && (\n          <div className=\"mt-2 flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-red-600 font-bold\">Recording: {formatTime(recordingTime)}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Timer Display */}\n      {(isThinking || isRecording) && (\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-pink-100 text-pink-800 px-6 py-3 rounded-2xl border border-pink-200\">\n            <Clock className=\"w-5 h-5\" />\n            <span className=\"font-bold text-lg\">\n              {isThinking ? `💭 Think: ${thinkingTime}s` : `🎬 Recording: ${formatTime(recordingTime)}`}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Video Display */}\n      <div className=\"relative bg-black rounded-2xl overflow-hidden border-2 border-pink-200\">\n        <video\n          ref={videoRef}\n          autoPlay\n          muted\n          className=\"w-full h-[32rem] object-cover transform scale-x-[-1]\"\n          style={{ transform: 'scaleX(-1)' }}\n        />\n        {isRecording && (\n          <div className=\"absolute top-4 left-4 flex items-center gap-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-full shadow-lg\">\n            <div className=\"w-3 h-3 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"text-sm font-bold\">🎬 REC {formatTime(recordingTime)}</span>\n          </div>\n        )}\n      </div>\n\n          {/* Control Buttons */}\n          <div className=\"flex gap-4 justify-center\">\n            {!isThinking && !isRecording && questions.length > 0 && currentQuestion < questions.length && status.includes('Ask Question') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-pink-500 to-yellow-500 text-white font-bold hover:from-pink-600 hover:to-yellow-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={askQuestion}\n              >\n                <Play className=\"w-6 h-6\" />\n                🎤 Ask Question\n              </button>\n            )}\n\n            {isThinking && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={skipThinking}\n              >\n                <Mic className=\"w-6 h-6\" />\n                ⚡ Skip & Start Recording\n              </button>\n            )}\n\n            {isRecording && (\n              <button\n                className=\"px-10 py-5 rounded-2xl bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold hover:from-red-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-xl flex items-center gap-3 animate-pulse\"\n                onClick={stopRecording}\n              >\n                <Square className=\"w-7 h-7\" />\n                🛑 Stop Recording ({formatTime(recordingTime)})\n              </button>\n            )}\n\n            {/* Fallback Next Question button */}\n            {!isThinking && !isRecording && questions.length > 0 && currentQuestion < questions.length - 1 && status.includes('Processing') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-blue-500 to-indigo-500 text-white font-bold hover:from-blue-600 hover:to-indigo-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={nextQuestion}\n              >\n                <Play className=\"w-6 h-6\" />\n                ➡️ Next Question\n              </button>\n            )}\n\n            {/* Go to Summary button for last question */}\n            {!isThinking && !isRecording && questions.length > 0 && currentQuestion === questions.length - 1 && status.includes('Processing') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={goToSummary}\n              >\n                <Sparkles className=\"w-6 h-6\" />\n                ✨ Go to Summary\n              </button>\n            )}\n\n            {/* Manual Go to Summary button for last question when ready */}\n            {!isThinking && !isRecording && questions.length > 0 && currentQuestion === questions.length - 1 && status.includes('Ask Question') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={goToSummary}\n              >\n                <Sparkles className=\"w-6 h-6\" />\n                ✨ End Interview & Go to Summary\n              </button>\n            )}\n\n            {/* Skip Transcription button when transcription is taking too long */}\n            {isTranscribing && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold hover:from-orange-600 hover:to-red-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={() => {\n                  setIsTranscribing(false);\n                  isTranscribingRef.current = false;\n                  setStatus('Transcription skipped. Click \"Ask Question\" for the next question.');\n                }}\n              >\n                <Clock className=\"w-6 h-6\" />\n                ⏭️ Skip Transcription & Continue\n              </button>\n            )}\n          </div>\n\n      {/* Progress Indicator */}\n      <div className=\"w-full bg-gradient-to-r from-pink-100 to-yellow-100 rounded-full h-3 border border-pink-200\">\n        <div \n          className=\"bg-gradient-to-r from-pink-500 to-yellow-500 h-3 rounded-full transition-all duration-300 shadow-sm\"\n          style={{ width: `${Math.min(100, ((currentQuestion + 1) / questions.length) * 100)}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}