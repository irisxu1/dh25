{"ast":null,"code":"var _jsxFileName = \"/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUESTIONS = [\"Tell me about yourself and your background.\", \"What are your greatest strengths?\", \"Describe a challenging situation you've faced and how you handled it.\", \"Where do you see yourself in 5 years?\", \"Why do you want to work for our company?\"];\nexport default function InterviewRecorder({\n  company,\n  onStop,\n  onCancel\n}) {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(30);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState('');\n  const [recordings, setRecordings] = useState([]);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const streamRef = useRef(null);\n  const thinkingTimerRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const currentQuestionRef = useRef(0);\n\n  // Update the ref whenever currentQuestion changes\n  useEffect(() => {\n    currentQuestionRef.current = currentQuestion;\n  }, [currentQuestion]);\n  useEffect(() => {\n    let isMounted = true;\n\n    // Setup camera and microphone access\n    const setupMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: 1280,\n            height: 720\n          },\n          audio: true\n        });\n        if (!isMounted) {\n          stream.getTracks().forEach(track => track.stop());\n          return;\n        }\n        streamRef.current = stream;\n\n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n\n        // Check for supported MIME types\n        let mimeType = 'video/webm;codecs=vp9,opus';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'video/webm';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'video/mp4';\n          }\n        }\n        const mr = new MediaRecorder(stream, {\n          mimeType: mimeType\n        });\n        mr.ondataavailable = e => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n        mr.onstop = async () => {\n          console.log('MediaRecorder onstop event triggered');\n          if (chunksRef.current.length === 0) {\n            console.log('No audio/video data recorded');\n            setStatus('No recording data captured. Please try again.');\n            return;\n          }\n          const videoBlob = new Blob(chunksRef.current, {\n            type: mimeType\n          });\n          chunksRef.current = [];\n\n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n\n          // Save video locally with company naming\n          const fileName = `${company.toLowerCase().replace(/\\s+/g, '')}q${currentQuestion + 1}.webm`;\n          const link = document.createElement('a');\n          link.href = videoUrl;\n          link.download = fileName;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQuestion + 1,\n            question: QUESTIONS[currentQuestion],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size,\n            fileName: fileName\n          }]);\n\n          // Extract audio for transcription\n          const audioBlob = await extractAudioFromVideo(videoBlob);\n\n          // Transcribe the audio\n          setStatus('Transcribing your answer...');\n          try {\n            const transcription = await elevenLabsService.speechToText(audioBlob);\n            const answerText = transcription || '';\n\n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: ${answerText}\\n`);\n          } catch (error) {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: [Transcription failed]\\n`);\n          }\n\n          // Progress to next question or finish\n          setTimeout(() => {\n            if (currentQuestion < QUESTIONS.length - 1) {\n              setCurrentQuestion(prev => prev + 1);\n              setStatus('Click \"Ask Question\" for the next question.');\n            } else {\n              // All questions completed, analyze with OpenAI\n              setStatus('Analyzing your interview...');\n              analyzeInterview();\n            }\n          }, 2000);\n        };\n        mediaRecorderRef.current = mr;\n        setStatus('Ready to start interview. Click \"Ask Question\" to begin.');\n      } catch (error) {\n        console.error('Media setup failed:', error);\n        setStatus('Camera/Microphone permission denied or not available.');\n      }\n    };\n    setupMedia();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async videoBlob => {\n    return new Promise(resolve => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n  const askQuestion = async () => {\n    if (currentQuestion >= QUESTIONS.length) return;\n    const question = QUESTIONS[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n  const startRecording = () => {\n    if (!mediaRecorderRef.current) {\n      console.log('MediaRecorder not initialized');\n      setStatus('MediaRecorder not ready. Please wait and try again.');\n      return;\n    }\n\n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      console.log('MediaRecorder is already recording');\n      return;\n    }\n\n    // Check if MediaRecorder is in a valid state\n    if (mediaRecorderRef.current.state === 'inactive') {\n      setIsRecording(true);\n      setRecordingTime(0);\n      setStatus('Recording your answer...');\n      chunksRef.current = [];\n      try {\n        mediaRecorderRef.current.start(100); // Start with 100ms timeslice\n        console.log('Recording started successfully');\n\n        // Start recording timer\n        recordingTimerRef.current = setInterval(() => {\n          setRecordingTime(prev => prev + 1);\n        }, 1000);\n      } catch (error) {\n        console.error('Failed to start recording:', error);\n        setIsRecording(false);\n        setStatus('Failed to start recording. Please try again.');\n      }\n    } else {\n      console.log('MediaRecorder in invalid state:', mediaRecorderRef.current.state);\n      setStatus('MediaRecorder not ready. Please try again.');\n    }\n  };\n  const stopRecording = async () => {\n    if (!mediaRecorderRef.current || !isRecording) {\n      console.log('Cannot stop recording: MediaRecorder not ready or not recording');\n      return;\n    }\n\n    // Check if MediaRecorder is actually recording\n    if (mediaRecorderRef.current.state !== 'recording') {\n      console.log('MediaRecorder is not recording, current state:', mediaRecorderRef.current.state);\n      setIsRecording(false);\n      return;\n    }\n    console.log('Stopping recording...');\n    setIsRecording(false);\n    setStatus('Processing your answer...');\n\n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    try {\n      mediaRecorderRef.current.stop();\n      console.log('MediaRecorder stop() called');\n\n      // The onstop event handler will handle the rest\n      // We don't need to manually progress here as it's handled in the onstop callback\n    } catch (error) {\n      console.error('Failed to stop recording:', error);\n      setStatus('Failed to stop recording. Please try again.');\n    }\n  };\n  const analyzeInterview = async () => {\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: company,\n        questionCount: QUESTIONS.length\n      });\n      onStop({\n        company,\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        company,\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: {\n          fillerWords: 0,\n          speakingRateWpm: 0\n        },\n        questionAnalysis: [],\n        decision: {\n          pass: false,\n          rationale: 'Analysis failed'\n        }\n      });\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\",\n        children: \"\\u2728 Interview Practice \\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\",\n          children: [\"Question \", currentQuestion + 1, \" of \", QUESTIONS.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCancel,\n          className: \"px-4 py-2 rounded-xl bg-gray-500 hover:bg-gray-600 text-white font-medium transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), currentQuestion < QUESTIONS.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-bold text-pink-800 mb-3 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-5 h-5 text-pink-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), \"Current Question:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-pink-700 text-lg leading-relaxed\",\n        children: QUESTIONS[currentQuestion]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-pink-700 font-medium\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), (isThinking || isRecording) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-pink-100 text-pink-800 px-6 py-3 rounded-2xl border border-pink-200\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-bold text-lg\",\n          children: isThinking ? `💭 Think: ${thinkingTime}s` : `🎬 Recording: ${formatTime(recordingTime)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative bg-black rounded-2xl overflow-hidden border-2 border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: true,\n        className: \"w-full h-64 object-cover transform scale-x-[-1]\",\n        style: {\n          transform: 'scaleX(-1)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 flex items-center gap-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-full shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-3 h-3 bg-white rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-bold\",\n          children: \"\\uD83C\\uDFAC REC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-4 justify-center\",\n      children: [!isThinking && !isRecording && currentQuestion < QUESTIONS.length && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-pink-500 to-yellow-500 text-white font-bold hover:from-pink-600 hover:to-yellow-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: askQuestion,\n        children: [/*#__PURE__*/_jsxDEV(Play, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), \"\\uD83C\\uDFA4 Ask Question\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this), isThinking && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: skipThinking,\n        children: [/*#__PURE__*/_jsxDEV(Mic, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), \"\\u26A1 Skip & Start Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold hover:from-red-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this), \"\\uD83D\\uDED1 Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gradient-to-r from-pink-100 to-yellow-100 rounded-full h-3 border border-pink-200\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gradient-to-r from-pink-500 to-yellow-500 h-3 rounded-full transition-all duration-300 shadow-sm\",\n        style: {\n          width: `${Math.min(100, (currentQuestion + 1) / QUESTIONS.length * 100)}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewRecorder, \"CUj1JphKzMczjOQYjxUadm2AZAI=\");\n_c = InterviewRecorder;\nvar _c;\n$RefreshReg$(_c, \"InterviewRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Play","Square","Mic","Clock","Sparkles","elevenLabsService","analyzeTranscriptWithGemini","jsxDEV","_jsxDEV","QUESTIONS","InterviewRecorder","company","onStop","onCancel","_s","currentQuestion","setCurrentQuestion","isRecording","setIsRecording","isThinking","setIsThinking","thinkingTime","setThinkingTime","recordingTime","setRecordingTime","status","setStatus","transcript","setTranscript","recordings","setRecordings","videoRef","mediaRecorderRef","chunksRef","streamRef","thinkingTimerRef","recordingTimerRef","currentQuestionRef","current","isMounted","setupMedia","stream","navigator","mediaDevices","getUserMedia","video","width","height","audio","getTracks","forEach","track","stop","srcObject","mimeType","MediaRecorder","isTypeSupported","mr","ondataavailable","e","data","size","push","onstop","console","log","length","videoBlob","Blob","type","videoUrl","URL","createObjectURL","fileName","toLowerCase","replace","link","document","createElement","href","download","body","appendChild","click","removeChild","prev","questionNumber","question","audioBlob","extractAudioFromVideo","transcription","speechToText","answerText","error","setTimeout","analyzeInterview","clearInterval","Promise","resolve","canvas","audioContext","AudioContext","src","onloadedmetadata","askQuestion","generateQuestionAudio","play","startThinkingTimer","setInterval","startRecording","skipThinking","state","start","stopRecording","analysis","questionCount","createdAt","Date","toISOString","summary","metrics","fillerWords","speakingRateWpm","questionAnalysis","decision","pass","rationale","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","children","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","muted","style","transform","min","_c","$RefreshReg$"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Video, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport type { Company } from '../App';\n\ninterface InterviewRecorderProps {\n  company: Company;\n  onStop: (results: any) => void;\n  onCancel: () => void;\n}\n\nconst QUESTIONS = [\n  \"Tell me about yourself and your background.\",\n  \"What are your greatest strengths?\",\n  \"Describe a challenging situation you've faced and how you handled it.\",\n  \"Where do you see yourself in 5 years?\",\n  \"Why do you want to work for our company?\"\n];\n\nexport default function InterviewRecorder({ company, onStop, onCancel }: InterviewRecorderProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(30);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState<string>('');\n  const [recordings, setRecordings] = useState<any[]>([]);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const chunksRef = useRef<BlobPart[]>([]);\n  const streamRef = useRef<MediaStream | null>(null);\n  const thinkingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const recordingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const currentQuestionRef = useRef<number>(0);\n\n  // Update the ref whenever currentQuestion changes\n  useEffect(() => {\n    currentQuestionRef.current = currentQuestion;\n  }, [currentQuestion]);\n\n  useEffect(() => {\n    let isMounted = true;\n    \n    // Setup camera and microphone access\n    const setupMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          video: { width: 1280, height: 720 },\n          audio: true \n        });\n        \n        if (!isMounted) {\n          stream.getTracks().forEach(track => track.stop());\n          return;\n        }\n        \n        streamRef.current = stream;\n        \n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        \n        // Check for supported MIME types\n        let mimeType = 'video/webm;codecs=vp9,opus';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'video/webm';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'video/mp4';\n          }\n        }\n        \n        const mr = new MediaRecorder(stream, {\n          mimeType: mimeType\n        });\n        \n        mr.ondataavailable = (e) => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n        \n        mr.onstop = async () => {\n          console.log('MediaRecorder onstop event triggered');\n          \n          if (chunksRef.current.length === 0) {\n            console.log('No audio/video data recorded');\n            setStatus('No recording data captured. Please try again.');\n            return;\n          }\n          \n          const videoBlob = new Blob(chunksRef.current, { type: mimeType });\n          chunksRef.current = [];\n          \n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n          \n          // Save video locally with company naming\n          const fileName = `${company.toLowerCase().replace(/\\s+/g, '')}q${currentQuestion + 1}.webm`;\n          const link = document.createElement('a');\n          link.href = videoUrl;\n          link.download = fileName;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          \n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQuestion + 1,\n            question: QUESTIONS[currentQuestion],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size,\n            fileName: fileName\n          }]);\n          \n          // Extract audio for transcription\n          const audioBlob = await extractAudioFromVideo(videoBlob);\n          \n          // Transcribe the audio\n          setStatus('Transcribing your answer...');\n          try {\n            const transcription = await elevenLabsService.speechToText(audioBlob);\n            const answerText = transcription || '';\n            \n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: ${answerText}\\n`);\n          } catch (error) {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQuestion + 1}: ${QUESTIONS[currentQuestion]}\\nA${currentQuestion + 1}: [Transcription failed]\\n`);\n          }\n          \n          // Progress to next question or finish\n          setTimeout(() => {\n            if (currentQuestion < QUESTIONS.length - 1) {\n              setCurrentQuestion(prev => prev + 1);\n              setStatus('Click \"Ask Question\" for the next question.');\n            } else {\n              // All questions completed, analyze with OpenAI\n              setStatus('Analyzing your interview...');\n              analyzeInterview();\n            }\n          }, 2000);\n        };\n        \n        mediaRecorderRef.current = mr;\n        setStatus('Ready to start interview. Click \"Ask Question\" to begin.');\n        \n      } catch (error) {\n        console.error('Media setup failed:', error);\n        setStatus('Camera/Microphone permission denied or not available.');\n      }\n    };\n    \n    setupMedia();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async (videoBlob: Blob): Promise<Blob> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      \n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n\n  const askQuestion = async () => {\n    if (currentQuestion >= QUESTIONS.length) return;\n    \n    const question = QUESTIONS[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    \n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    \n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current!);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n\n  const startRecording = () => {\n    if (!mediaRecorderRef.current) {\n      console.log('MediaRecorder not initialized');\n      setStatus('MediaRecorder not ready. Please wait and try again.');\n      return;\n    }\n    \n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      console.log('MediaRecorder is already recording');\n      return;\n    }\n    \n    // Check if MediaRecorder is in a valid state\n    if (mediaRecorderRef.current.state === 'inactive') {\n      setIsRecording(true);\n      setRecordingTime(0);\n      setStatus('Recording your answer...');\n      chunksRef.current = [];\n      \n      try {\n        mediaRecorderRef.current.start(100); // Start with 100ms timeslice\n        console.log('Recording started successfully');\n        \n        // Start recording timer\n        recordingTimerRef.current = setInterval(() => {\n          setRecordingTime(prev => prev + 1);\n        }, 1000);\n      } catch (error) {\n        console.error('Failed to start recording:', error);\n        setIsRecording(false);\n        setStatus('Failed to start recording. Please try again.');\n      }\n    } else {\n      console.log('MediaRecorder in invalid state:', mediaRecorderRef.current.state);\n      setStatus('MediaRecorder not ready. Please try again.');\n    }\n  };\n\n  const stopRecording = async () => {\n    if (!mediaRecorderRef.current || !isRecording) {\n      console.log('Cannot stop recording: MediaRecorder not ready or not recording');\n      return;\n    }\n    \n    // Check if MediaRecorder is actually recording\n    if (mediaRecorderRef.current.state !== 'recording') {\n      console.log('MediaRecorder is not recording, current state:', mediaRecorderRef.current.state);\n      setIsRecording(false);\n      return;\n    }\n    \n    console.log('Stopping recording...');\n    setIsRecording(false);\n    setStatus('Processing your answer...');\n    \n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    \n    try {\n      mediaRecorderRef.current.stop();\n      console.log('MediaRecorder stop() called');\n      \n      // The onstop event handler will handle the rest\n      // We don't need to manually progress here as it's handled in the onstop callback\n      \n    } catch (error) {\n      console.error('Failed to stop recording:', error);\n      setStatus('Failed to stop recording. Please try again.');\n    }\n  };\n\n  const analyzeInterview = async () => {\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: company,\n        questionCount: QUESTIONS.length\n      });\n\n      onStop({\n        company,\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        company,\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: { fillerWords: 0, speakingRateWpm: 0 },\n        questionAnalysis: [],\n        decision: { pass: false, rationale: 'Analysis failed' }\n      });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\">\n          ✨ Interview Practice ✨\n        </h2>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\">\n            Question {currentQuestion + 1} of {QUESTIONS.length}\n          </div>\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 rounded-xl bg-gray-500 hover:bg-gray-600 text-white font-medium transition-colors\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n\n      {/* Current Question Display */}\n      {currentQuestion < QUESTIONS.length && (\n        <div className=\"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\">\n          <h3 className=\"font-bold text-pink-800 mb-3 flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-pink-500\" />\n            Current Question:\n          </h3>\n          <p className=\"text-pink-700 text-lg leading-relaxed\">{QUESTIONS[currentQuestion]}</p>\n        </div>\n      )}\n\n      {/* Status Display */}\n      <div className=\"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\">\n        <p className=\"text-sm text-pink-700 font-medium\">{status}</p>\n      </div>\n\n      {/* Timer Display */}\n      {(isThinking || isRecording) && (\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-pink-100 text-pink-800 px-6 py-3 rounded-2xl border border-pink-200\">\n            <Clock className=\"w-5 h-5\" />\n            <span className=\"font-bold text-lg\">\n              {isThinking ? `💭 Think: ${thinkingTime}s` : `🎬 Recording: ${formatTime(recordingTime)}`}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Video Display */}\n      <div className=\"relative bg-black rounded-2xl overflow-hidden border-2 border-pink-200\">\n        <video\n          ref={videoRef}\n          autoPlay\n          muted\n          className=\"w-full h-64 object-cover transform scale-x-[-1]\"\n          style={{ transform: 'scaleX(-1)' }}\n        />\n        {isRecording && (\n          <div className=\"absolute top-4 left-4 flex items-center gap-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-full shadow-lg\">\n            <div className=\"w-3 h-3 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"text-sm font-bold\">🎬 REC</span>\n          </div>\n        )}\n      </div>\n\n      {/* Control Buttons */}\n      <div className=\"flex gap-4 justify-center\">\n        {!isThinking && !isRecording && currentQuestion < QUESTIONS.length && (\n          <button\n            className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-pink-500 to-yellow-500 text-white font-bold hover:from-pink-600 hover:to-yellow-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n            onClick={askQuestion}\n          >\n            <Play className=\"w-6 h-6\" />\n            🎤 Ask Question\n          </button>\n        )}\n        \n        {isThinking && (\n          <button\n            className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n            onClick={skipThinking}\n          >\n            <Mic className=\"w-6 h-6\" />\n            ⚡ Skip & Start Recording\n          </button>\n        )}\n        \n        {isRecording && (\n          <button\n            className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold hover:from-red-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n            onClick={stopRecording}\n          >\n            <Square className=\"w-6 h-6\" />\n            🛑 Stop Recording\n          </button>\n        )}\n      </div>\n\n      {/* Progress Indicator */}\n      <div className=\"w-full bg-gradient-to-r from-pink-100 to-yellow-100 rounded-full h-3 border border-pink-200\">\n        <div \n          className=\"bg-gradient-to-r from-pink-500 to-yellow-500 h-3 rounded-full transition-all duration-300 shadow-sm\"\n          style={{ width: `${Math.min(100, ((currentQuestion + 1) / QUESTIONS.length) * 100)}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}