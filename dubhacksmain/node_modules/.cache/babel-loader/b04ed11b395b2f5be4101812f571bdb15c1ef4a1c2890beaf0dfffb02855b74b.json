{"ast":null,"code":"var _jsxFileName = \"/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_QUESTIONS = [\"Tell me about yourself and your background.\", \"What are your greatest strengths?\", \"Describe a challenging situation you've faced and how you handled it.\", \"Where do you see yourself in 5 years?\", \"Why do you want to work for our company?\", \"What is your biggest weakness?\", \"Describe a time when you had to work with a difficult team member.\", \"How do you handle stress and pressure?\", \"What motivates you in your work?\", \"Describe a project you're particularly proud of.\", \"How do you prioritize your tasks when you have multiple deadlines?\", \"Tell me about a time you failed and what you learned from it.\", \"What are your career goals?\", \"How do you stay updated with industry trends?\", \"Describe a time when you had to learn something new quickly.\", \"What would you do in your first 30 days at this company?\", \"How do you handle constructive criticism?\", \"Tell me about a time you had to make a difficult decision.\", \"What makes you unique compared to other candidates?\", \"How do you work in a team environment?\", \"Describe a time when you had to adapt to change.\", \"What questions do you have for us?\", \"How do you measure success?\", \"Tell me about a time you had to solve a complex problem.\", \"What are your salary expectations?\"];\n\n// Function to get 5 random questions\nconst getRandomQuestions = () => {\n  const shuffled = [...ALL_QUESTIONS].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, 5);\n};\nexport default function InterviewRecorder({\n  company,\n  onStop,\n  onCancel\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(5);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState('');\n  const [recordings, setRecordings] = useState([]);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const streamRef = useRef(null);\n  const thinkingTimerRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const currentQuestionRef = useRef(0);\n\n  // Update the ref whenever currentQuestion changes\n  useEffect(() => {\n    currentQuestionRef.current = currentQuestion;\n  }, [currentQuestion]);\n\n  // Initialize random questions\n  useEffect(() => {\n    const randomQuestions = getRandomQuestions();\n    setQuestions(randomQuestions);\n  }, []);\n  useEffect(() => {\n    let isMounted = true;\n\n    // Setup camera and microphone access\n    const setupMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: {\n              ideal: 1920\n            },\n            height: {\n              ideal: 1080\n            },\n            aspectRatio: {\n              ideal: 16 / 9\n            }\n          },\n          audio: true\n        });\n        if (!isMounted) {\n          stream.getTracks().forEach(track => track.stop());\n          return;\n        }\n        streamRef.current = stream;\n\n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n\n        // Check for supported MIME types\n        let mimeType = 'video/webm;codecs=vp9,opus';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'video/webm';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'video/mp4';\n          }\n        }\n        const mr = new MediaRecorder(stream, {\n          mimeType: mimeType\n        });\n        mr.ondataavailable = e => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n        mr.onstop = async () => {\n          if (chunksRef.current.length === 0) {\n            setStatus('No recording data captured. Please try again.');\n            return;\n          }\n          const videoBlob = new Blob(chunksRef.current, {\n            type: mimeType\n          });\n          chunksRef.current = [];\n\n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n\n          // Get current question from ref\n          const currentQ = currentQuestionRef.current;\n\n          // Save video locally with company naming\n          const fileName = `${company.toLowerCase().replace(/\\s+/g, '')}q${currentQ + 1}.webm`;\n          const link = document.createElement('a');\n          link.href = videoUrl;\n          link.download = fileName;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQ + 1,\n            question: questions[currentQ],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size,\n            fileName: fileName\n          }]);\n\n          // Extract audio for transcription\n          const audioBlob = await extractAudioFromVideo(videoBlob);\n\n          // Transcribe the audio\n          setStatus('Transcribing your answer...');\n          try {\n            const transcription = await elevenLabsService.speechToText(audioBlob);\n            const answerText = transcription || '';\n\n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${questions[currentQ]}\\nA${currentQ + 1}: ${answerText}\\n`);\n          } catch (error) {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${questions[currentQ]}\\nA${currentQ + 1}: [Transcription failed]\\n`);\n          }\n\n          // Progress to next question or finish\n          setTimeout(() => {\n            const nextQuestion = currentQuestionRef.current + 1;\n            if (nextQuestion < questions.length) {\n              setCurrentQuestion(nextQuestion);\n              setStatus('Click \"Ask Question\" for the next question.');\n            } else {\n              // All questions completed, analyze with OpenAI\n              setStatus('Analyzing your interview...');\n              analyzeInterview();\n            }\n          }, 2000);\n        };\n        mediaRecorderRef.current = mr;\n        setStatus('Ready to start interview. Click \"Ask Question\" to begin.');\n      } catch (error) {\n        console.error('Media setup failed:', error);\n        setStatus('Camera/Microphone permission denied or not available.');\n      }\n    };\n    setupMedia();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async videoBlob => {\n    return new Promise(resolve => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n  const askQuestion = async () => {\n    if (currentQuestion >= questions.length) return;\n    const question = questions[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n  const nextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setStatus('Click \"Ask Question\" for the next question.');\n    } else {\n      setStatus('Analyzing your interview...');\n      analyzeInterview();\n    }\n  };\n  const goToSummary = () => {\n    setStatus('Analyzing your interview...');\n    analyzeInterview();\n  };\n  const startRecording = () => {\n    // Clear any existing recording timer first\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n\n    // Always set recording state to true first, regardless of MediaRecorder state\n    setIsRecording(true);\n    setRecordingTime(0);\n    setStatus('Recording your answer...');\n    chunksRef.current = [];\n\n    // Start recording timer immediately\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n    if (!mediaRecorderRef.current) {\n      return;\n    }\n\n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      return;\n    }\n\n    // Check if MediaRecorder is in a valid state\n    if (mediaRecorderRef.current.state === 'inactive') {\n      try {\n        mediaRecorderRef.current.start(100); // Start with 100ms timeslice\n      } catch (error) {\n        console.error('Failed to start MediaRecorder:', error);\n        // Don't set isRecording to false here - keep the button showing\n      }\n    }\n  };\n  const stopRecording = async () => {\n    if (!isRecording) {\n      return;\n    }\n    setIsRecording(false);\n    setStatus('Processing your answer...');\n\n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n\n    // Try to stop MediaRecorder if it exists and is recording\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n\n        // The onstop event handler will handle the rest\n        // We don't need to manually progress here as it's handled in the onstop callback\n      } catch (error) {\n        console.error('Failed to stop recording:', error);\n        setStatus('Failed to stop recording. Please try again.');\n      }\n    } else {\n      // If MediaRecorder wasn't actually recording, manually progress to next question\n      setTimeout(() => {\n        const nextQuestion = currentQuestionRef.current + 1;\n        if (nextQuestion < questions.length) {\n          setCurrentQuestion(nextQuestion);\n          setStatus('Click \"Ask Question\" for the next question.');\n        } else {\n          // All questions completed, analyze with OpenAI\n          setStatus('Analyzing your interview...');\n          analyzeInterview();\n        }\n      }, 1000);\n    }\n  };\n  const analyzeInterview = async () => {\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: company,\n        questionCount: questions.length\n      });\n      onStop({\n        company,\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        company,\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: {\n          fillerWords: 0,\n          speakingRateWpm: 0\n        },\n        questionAnalysis: [],\n        decision: {\n          pass: false,\n          rationale: 'Analysis failed'\n        }\n      });\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\",\n        children: \"\\u2728 Interview Practice \\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\",\n          children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCancel,\n          className: \"px-4 py-2 rounded-xl bg-gray-500 hover:bg-gray-600 text-white font-medium transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), currentQuestion < questions.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-bold text-pink-800 mb-3 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-5 h-5 text-pink-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), currentQuestion === questions.length - 1 ? 'Final Question:' : 'Current Question:']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-pink-700 text-lg leading-relaxed\",\n        children: questions[currentQuestion]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this), currentQuestion === questions.length - 1 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-pink-600 text-sm mt-2 font-medium\",\n        children: \"\\uD83C\\uDF89 This is your last question! You can end the interview anytime.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-pink-700 font-medium\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-3 h-3 bg-red-500 rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-red-600 font-bold\",\n          children: [\"Recording: \", formatTime(recordingTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), (isThinking || isRecording) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-pink-100 text-pink-800 px-6 py-3 rounded-2xl border border-pink-200\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-bold text-lg\",\n          children: isThinking ? `💭 Think: ${thinkingTime}s` : `🎬 Recording: ${formatTime(recordingTime)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative bg-black rounded-2xl overflow-hidden border-2 border-pink-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: true,\n        className: \"w-full h-[32rem] object-cover transform scale-x-[-1]\",\n        style: {\n          transform: 'scaleX(-1)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 flex items-center gap-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-full shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-3 h-3 bg-white rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-bold\",\n          children: [\"\\uD83C\\uDFAC REC \", formatTime(recordingTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-4 justify-center\",\n      children: [!isThinking && !isRecording && currentQuestion < questions.length && status.includes('Ask Question') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-pink-500 to-yellow-500 text-white font-bold hover:from-pink-600 hover:to-yellow-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: askQuestion,\n        children: [/*#__PURE__*/_jsxDEV(Play, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 17\n        }, this), \"\\uD83C\\uDFA4 Ask Question\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 15\n      }, this), isThinking && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: skipThinking,\n        children: [/*#__PURE__*/_jsxDEV(Mic, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 17\n        }, this), \"\\u26A1 Skip & Start Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 15\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-10 py-5 rounded-2xl bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold hover:from-red-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-xl flex items-center gap-3 animate-pulse\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          className: \"w-7 h-7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 17\n        }, this), \"\\uD83D\\uDED1 Stop Recording (\", formatTime(recordingTime), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 15\n      }, this), !isThinking && !isRecording && currentQuestion < questions.length - 1 && status.includes('Processing') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-blue-500 to-indigo-500 text-white font-bold hover:from-blue-600 hover:to-indigo-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: nextQuestion,\n        children: [/*#__PURE__*/_jsxDEV(Play, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 17\n        }, this), \"\\u27A1\\uFE0F Next Question\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 15\n      }, this), !isThinking && !isRecording && currentQuestion === questions.length - 1 && status.includes('Processing') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: goToSummary,\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 17\n        }, this), \"\\u2728 Go to Summary\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 15\n      }, this), !isThinking && !isRecording && currentQuestion === questions.length - 1 && status.includes('Ask Question') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\",\n        onClick: goToSummary,\n        children: [/*#__PURE__*/_jsxDEV(Sparkles, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 17\n        }, this), \"\\u2728 End Interview & Go to Summary\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gradient-to-r from-pink-100 to-yellow-100 rounded-full h-3 border border-pink-200\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gradient-to-r from-pink-500 to-yellow-500 h-3 rounded-full transition-all duration-300 shadow-sm\",\n        style: {\n          width: `${Math.min(100, (currentQuestion + 1) / questions.length * 100)}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewRecorder, \"gf7mB9HbJW2SLtE3/3G5jzagyhY=\");\n_c = InterviewRecorder;\nvar _c;\n$RefreshReg$(_c, \"InterviewRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Play","Square","Mic","Clock","Sparkles","elevenLabsService","analyzeTranscriptWithGemini","jsxDEV","_jsxDEV","ALL_QUESTIONS","getRandomQuestions","shuffled","sort","Math","random","slice","InterviewRecorder","company","onStop","onCancel","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","isRecording","setIsRecording","isThinking","setIsThinking","thinkingTime","setThinkingTime","recordingTime","setRecordingTime","status","setStatus","transcript","setTranscript","recordings","setRecordings","videoRef","mediaRecorderRef","chunksRef","streamRef","thinkingTimerRef","recordingTimerRef","currentQuestionRef","current","randomQuestions","isMounted","setupMedia","stream","navigator","mediaDevices","getUserMedia","video","width","ideal","height","aspectRatio","audio","getTracks","forEach","track","stop","srcObject","mimeType","MediaRecorder","isTypeSupported","mr","ondataavailable","e","data","size","push","onstop","length","videoBlob","Blob","type","videoUrl","URL","createObjectURL","currentQ","fileName","toLowerCase","replace","link","document","createElement","href","download","body","appendChild","click","removeChild","prev","questionNumber","question","audioBlob","extractAudioFromVideo","transcription","speechToText","answerText","error","console","setTimeout","nextQuestion","analyzeInterview","clearInterval","Promise","resolve","canvas","audioContext","AudioContext","src","onloadedmetadata","askQuestion","generateQuestionAudio","play","startThinkingTimer","setInterval","startRecording","skipThinking","goToSummary","state","start","stopRecording","analysis","questionCount","createdAt","Date","toISOString","summary","metrics","fillerWords","speakingRateWpm","questionAnalysis","decision","pass","rationale","formatTime","seconds","mins","floor","secs","toString","padStart","className","children","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","muted","style","transform","includes","min","_c","$RefreshReg$"],"sources":["/Users/irisxu/Documents/DubHacks2025/dubhacksmain/src/components/InterviewRecorder.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Play, Square, Mic, Video, Clock, Sparkles } from 'lucide-react';\nimport { elevenLabsService } from '../services/elevenLabsService';\nimport { analyzeTranscriptWithGemini } from '../services/voiceAnalysisService';\nimport type { Company } from '../App';\n\ninterface InterviewRecorderProps {\n  company: Company;\n  onStop: (results: any) => void;\n  onCancel: () => void;\n}\n\nconst ALL_QUESTIONS = [\n  \"Tell me about yourself and your background.\",\n  \"What are your greatest strengths?\",\n  \"Describe a challenging situation you've faced and how you handled it.\",\n  \"Where do you see yourself in 5 years?\",\n  \"Why do you want to work for our company?\",\n  \"What is your biggest weakness?\",\n  \"Describe a time when you had to work with a difficult team member.\",\n  \"How do you handle stress and pressure?\",\n  \"What motivates you in your work?\",\n  \"Describe a project you're particularly proud of.\",\n  \"How do you prioritize your tasks when you have multiple deadlines?\",\n  \"Tell me about a time you failed and what you learned from it.\",\n  \"What are your career goals?\",\n  \"How do you stay updated with industry trends?\",\n  \"Describe a time when you had to learn something new quickly.\",\n  \"What would you do in your first 30 days at this company?\",\n  \"How do you handle constructive criticism?\",\n  \"Tell me about a time you had to make a difficult decision.\",\n  \"What makes you unique compared to other candidates?\",\n  \"How do you work in a team environment?\",\n  \"Describe a time when you had to adapt to change.\",\n  \"What questions do you have for us?\",\n  \"How do you measure success?\",\n  \"Tell me about a time you had to solve a complex problem.\",\n  \"What are your salary expectations?\"\n];\n\n// Function to get 5 random questions\nconst getRandomQuestions = () => {\n  const shuffled = [...ALL_QUESTIONS].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, 5);\n};\n\nexport default function InterviewRecorder({ company, onStop, onCancel }: InterviewRecorderProps) {\n  const [questions, setQuestions] = useState<string[]>([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [thinkingTime, setThinkingTime] = useState(5);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [status, setStatus] = useState('Click \"Ask Question\" to begin.');\n  const [transcript, setTranscript] = useState<string>('');\n  const [recordings, setRecordings] = useState<any[]>([]);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const chunksRef = useRef<BlobPart[]>([]);\n  const streamRef = useRef<MediaStream | null>(null);\n  const thinkingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const recordingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const currentQuestionRef = useRef<number>(0);\n\n  // Update the ref whenever currentQuestion changes\n  useEffect(() => {\n    currentQuestionRef.current = currentQuestion;\n  }, [currentQuestion]);\n\n\n  // Initialize random questions\n  useEffect(() => {\n    const randomQuestions = getRandomQuestions();\n    setQuestions(randomQuestions);\n  }, []);\n\n  useEffect(() => {\n    let isMounted = true;\n    \n    // Setup camera and microphone access\n    const setupMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { \n            width: { ideal: 1920 },\n            height: { ideal: 1080 },\n            aspectRatio: { ideal: 16/9 }\n          },\n          audio: true\n        });\n        \n        if (!isMounted) {\n          stream.getTracks().forEach(track => track.stop());\n          return;\n        }\n        \n        streamRef.current = stream;\n        \n        // Set up video element\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        \n        // Check for supported MIME types\n        let mimeType = 'video/webm;codecs=vp9,opus';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'video/webm';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'video/mp4';\n          }\n        }\n        \n        const mr = new MediaRecorder(stream, {\n          mimeType: mimeType\n        });\n        \n        mr.ondataavailable = (e) => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n        \n        mr.onstop = async () => {\n          if (chunksRef.current.length === 0) {\n            setStatus('No recording data captured. Please try again.');\n            return;\n          }\n          \n          const videoBlob = new Blob(chunksRef.current, { type: mimeType });\n          chunksRef.current = [];\n          \n          // Create video URL for playback\n          const videoUrl = URL.createObjectURL(videoBlob);\n          \n          // Get current question from ref\n          const currentQ = currentQuestionRef.current;\n          \n          // Save video locally with company naming\n          const fileName = `${company.toLowerCase().replace(/\\s+/g, '')}q${currentQ + 1}.webm`;\n          const link = document.createElement('a');\n          link.href = videoUrl;\n          link.download = fileName;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          \n          // Store the video recording\n          setRecordings(prev => [...prev, {\n            questionNumber: currentQ + 1,\n            question: questions[currentQ],\n            videoUrl,\n            videoBlob,\n            size: videoBlob.size,\n            fileName: fileName\n          }]);\n          \n          // Extract audio for transcription\n          const audioBlob = await extractAudioFromVideo(videoBlob);\n          \n          // Transcribe the audio\n          setStatus('Transcribing your answer...');\n          try {\n            const transcription = await elevenLabsService.speechToText(audioBlob);\n            const answerText = transcription || '';\n            \n            // Store the answer for this question\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${questions[currentQ]}\\nA${currentQ + 1}: ${answerText}\\n`);\n          } catch (error) {\n            console.error('Transcription failed:', error);\n            setTranscript(prev => prev + `\\nQ${currentQ + 1}: ${questions[currentQ]}\\nA${currentQ + 1}: [Transcription failed]\\n`);\n          }\n          \n          // Progress to next question or finish\n          setTimeout(() => {\n            const nextQuestion = currentQuestionRef.current + 1;\n            if (nextQuestion < questions.length) {\n              setCurrentQuestion(nextQuestion);\n              setStatus('Click \"Ask Question\" for the next question.');\n            } else {\n              // All questions completed, analyze with OpenAI\n              setStatus('Analyzing your interview...');\n              analyzeInterview();\n            }\n          }, 2000);\n        };\n        \n        mediaRecorderRef.current = mr;\n        setStatus('Ready to start interview. Click \"Ask Question\" to begin.');\n        \n      } catch (error) {\n        console.error('Media setup failed:', error);\n        setStatus('Camera/Microphone permission denied or not available.');\n      }\n    };\n    \n    setupMedia();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (thinkingTimerRef.current) {\n        clearInterval(thinkingTimerRef.current);\n      }\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Helper function to extract audio from video for transcription\n  const extractAudioFromVideo = async (videoBlob: Blob): Promise<Blob> => {\n    return new Promise((resolve) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const audioContext = new AudioContext();\n      \n      video.src = URL.createObjectURL(videoBlob);\n      video.onloadedmetadata = () => {\n        // For now, return the video blob as audio\n        // In a real implementation, you'd extract just the audio track\n        resolve(videoBlob);\n      };\n    });\n  };\n\n  const askQuestion = async () => {\n    if (currentQuestion >= questions.length) return;\n\n    const question = questions[currentQuestion];\n    setStatus('Interviewer is asking the question...');\n    \n    try {\n      const audio = await elevenLabsService.generateQuestionAudio(question);\n      await audio.play();\n      startThinkingTimer();\n    } catch (error) {\n      console.error('Failed to play question:', error);\n      startThinkingTimer();\n    }\n  };\n\n  const startThinkingTimer = () => {\n    setIsThinking(true);\n    setThinkingTime(5);\n    setStatus('Think about your answer (5 seconds)...');\n    \n    thinkingTimerRef.current = setInterval(() => {\n      setThinkingTime(prev => {\n        if (prev <= 1) {\n          clearInterval(thinkingTimerRef.current!);\n          setIsThinking(false);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const skipThinking = () => {\n    if (thinkingTimerRef.current) {\n      clearInterval(thinkingTimerRef.current);\n    }\n    setIsThinking(false);\n    setThinkingTime(0);\n    startRecording();\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setStatus('Click \"Ask Question\" for the next question.');\n    } else {\n      setStatus('Analyzing your interview...');\n      analyzeInterview();\n    }\n  };\n\n  const goToSummary = () => {\n    setStatus('Analyzing your interview...');\n    analyzeInterview();\n  };\n\n  const startRecording = () => {\n    // Clear any existing recording timer first\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    \n    // Always set recording state to true first, regardless of MediaRecorder state\n    setIsRecording(true);\n    setRecordingTime(0);\n    setStatus('Recording your answer...');\n    chunksRef.current = [];\n    \n    // Start recording timer immediately\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n    \n    if (!mediaRecorderRef.current) {\n      return;\n    }\n    \n    // Check if MediaRecorder is already recording\n    if (mediaRecorderRef.current.state === 'recording') {\n      return;\n    }\n    \n    // Check if MediaRecorder is in a valid state\n    if (mediaRecorderRef.current.state === 'inactive') {\n      try {\n        mediaRecorderRef.current.start(100); // Start with 100ms timeslice\n      } catch (error) {\n        console.error('Failed to start MediaRecorder:', error);\n        // Don't set isRecording to false here - keep the button showing\n      }\n    }\n  };\n\n  const stopRecording = async () => {\n    if (!isRecording) {\n      return;\n    }\n    \n    setIsRecording(false);\n    setStatus('Processing your answer...');\n    \n    // Stop recording timer\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n    }\n    \n    // Try to stop MediaRecorder if it exists and is recording\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      try {\n        mediaRecorderRef.current.stop();\n        \n        // The onstop event handler will handle the rest\n        // We don't need to manually progress here as it's handled in the onstop callback\n        \n      } catch (error) {\n        console.error('Failed to stop recording:', error);\n        setStatus('Failed to stop recording. Please try again.');\n      }\n    } else {\n      // If MediaRecorder wasn't actually recording, manually progress to next question\n      setTimeout(() => {\n        const nextQuestion = currentQuestionRef.current + 1;\n        if (nextQuestion < questions.length) {\n          setCurrentQuestion(nextQuestion);\n          setStatus('Click \"Ask Question\" for the next question.');\n        } else {\n          // All questions completed, analyze with OpenAI\n          setStatus('Analyzing your interview...');\n          analyzeInterview();\n        }\n      }, 1000);\n    }\n  };\n\n  const analyzeInterview = async () => {\n    try {\n      const analysis = await analyzeTranscriptWithGemini(transcript, {\n        company: company,\n        questionCount: questions.length\n      });\n\n      onStop({\n        company,\n        transcript,\n        recordings,\n        ...analysis,\n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      onStop({\n        company,\n        transcript,\n        recordings,\n        summary: 'Analysis failed',\n        metrics: { fillerWords: 0, speakingRateWpm: 0 },\n        questionAnalysis: [],\n        decision: { pass: false, rationale: 'Analysis failed' }\n      });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg p-6 space-y-6 border border-pink-200\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-yellow-600 bg-clip-text text-transparent\">\n          ✨ Interview Practice ✨\n        </h2>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm font-medium text-pink-600 bg-pink-100 px-3 py-1 rounded-full\">\n            Question {currentQuestion + 1} of {questions.length}\n          </div>\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 rounded-xl bg-gray-500 hover:bg-gray-600 text-white font-medium transition-colors\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n\n      {/* Current Question Display */}\n      {currentQuestion < questions.length && (\n        <div className=\"bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl p-6 border border-pink-200\">\n          <h3 className=\"font-bold text-pink-800 mb-3 flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-pink-500\" />\n            {currentQuestion === questions.length - 1 ? 'Final Question:' : 'Current Question:'}\n          </h3>\n          <p className=\"text-pink-700 text-lg leading-relaxed\">{questions[currentQuestion]}</p>\n          {currentQuestion === questions.length - 1 && (\n            <p className=\"text-pink-600 text-sm mt-2 font-medium\">\n              🎉 This is your last question! You can end the interview anytime.\n            </p>\n          )}\n        </div>\n      )}\n\n      {/* Status Display */}\n      <div className=\"p-4 bg-gradient-to-r from-pink-50 to-yellow-50 rounded-2xl border border-pink-200\">\n        <p className=\"text-sm text-pink-700 font-medium\">{status}</p>\n        {isRecording && (\n          <div className=\"mt-2 flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-red-600 font-bold\">Recording: {formatTime(recordingTime)}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Timer Display */}\n      {(isThinking || isRecording) && (\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-pink-100 text-pink-800 px-6 py-3 rounded-2xl border border-pink-200\">\n            <Clock className=\"w-5 h-5\" />\n            <span className=\"font-bold text-lg\">\n              {isThinking ? `💭 Think: ${thinkingTime}s` : `🎬 Recording: ${formatTime(recordingTime)}`}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Video Display */}\n      <div className=\"relative bg-black rounded-2xl overflow-hidden border-2 border-pink-200\">\n        <video\n          ref={videoRef}\n          autoPlay\n          muted\n          className=\"w-full h-[32rem] object-cover transform scale-x-[-1]\"\n          style={{ transform: 'scaleX(-1)' }}\n        />\n        {isRecording && (\n          <div className=\"absolute top-4 left-4 flex items-center gap-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-full shadow-lg\">\n            <div className=\"w-3 h-3 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"text-sm font-bold\">🎬 REC {formatTime(recordingTime)}</span>\n          </div>\n        )}\n      </div>\n\n          {/* Control Buttons */}\n          <div className=\"flex gap-4 justify-center\">\n            {!isThinking && !isRecording && currentQuestion < questions.length && status.includes('Ask Question') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-pink-500 to-yellow-500 text-white font-bold hover:from-pink-600 hover:to-yellow-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={askQuestion}\n              >\n                <Play className=\"w-6 h-6\" />\n                🎤 Ask Question\n              </button>\n            )}\n\n            {isThinking && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={skipThinking}\n              >\n                <Mic className=\"w-6 h-6\" />\n                ⚡ Skip & Start Recording\n              </button>\n            )}\n\n            {isRecording && (\n              <button\n                className=\"px-10 py-5 rounded-2xl bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold hover:from-red-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-xl flex items-center gap-3 animate-pulse\"\n                onClick={stopRecording}\n              >\n                <Square className=\"w-7 h-7\" />\n                🛑 Stop Recording ({formatTime(recordingTime)})\n              </button>\n            )}\n\n            {/* Fallback Next Question button */}\n            {!isThinking && !isRecording && currentQuestion < questions.length - 1 && status.includes('Processing') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-blue-500 to-indigo-500 text-white font-bold hover:from-blue-600 hover:to-indigo-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={nextQuestion}\n              >\n                <Play className=\"w-6 h-6\" />\n                ➡️ Next Question\n              </button>\n            )}\n\n            {/* Go to Summary button for last question */}\n            {!isThinking && !isRecording && currentQuestion === questions.length - 1 && status.includes('Processing') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={goToSummary}\n              >\n                <Sparkles className=\"w-6 h-6\" />\n                ✨ Go to Summary\n              </button>\n            )}\n\n            {/* Manual Go to Summary button for last question when ready */}\n            {!isThinking && !isRecording && currentQuestion === questions.length - 1 && status.includes('Ask Question') && (\n              <button\n                className=\"px-8 py-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2\"\n                onClick={goToSummary}\n              >\n                <Sparkles className=\"w-6 h-6\" />\n                ✨ End Interview & Go to Summary\n              </button>\n            )}\n          </div>\n\n      {/* Progress Indicator */}\n      <div className=\"w-full bg-gradient-to-r from-pink-100 to-yellow-100 rounded-full h-3 border border-pink-200\">\n        <div \n          className=\"bg-gradient-to-r from-pink-500 to-yellow-500 h-3 rounded-full transition-all duration-300 shadow-sm\"\n          style={{ width: `${Math.min(100, ((currentQuestion + 1) / questions.length) * 100)}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}